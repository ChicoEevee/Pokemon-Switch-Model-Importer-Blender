# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy

from GFLib.Anim.Transform import Transform, TransformT

np = import_numpy()

class BoneInit(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BoneInit()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBoneInit(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BoneInit
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BoneInit
    def IsInit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BoneInit
    def Transform(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            obj = Transform()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BoneInitStart(builder):
    builder.StartObject(2)

def Start(builder):
    BoneInitStart(builder)

def BoneInitAddIsInit(builder, isInit):
    builder.PrependUint32Slot(0, isInit, 0)

def AddIsInit(builder, isInit):
    BoneInitAddIsInit(builder, isInit)

def BoneInitAddTransform(builder, transform):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(transform), 0)

def AddTransform(builder, transform):
    BoneInitAddTransform(builder, transform)

def BoneInitEnd(builder):
    return builder.EndObject()

def End(builder):
    return BoneInitEnd(builder)

try:
    from typing import Optional
except:
    pass

class BoneInitT(object):

    # BoneInitT
    def __init__(self):
        self.isInit = 0  # type: int
        self.transform = None  # type: Optional[TransformT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        boneInit = BoneInit()
        boneInit.Init(buf, pos)
        return cls.InitFromObj(boneInit)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, boneInit):
        x = BoneInitT()
        x._UnPack(boneInit)
        return x

    # BoneInitT
    def _UnPack(self, boneInit):
        if boneInit is None:
            return
        self.isInit = boneInit.IsInit()
        if boneInit.Transform() is not None:
            self.transform = TransformT.InitFromObj(boneInit.Transform())

    # BoneInitT
    def Pack(self, builder):
        BoneInitStart(builder)
        BoneInitAddIsInit(builder, self.isInit)
        if self.transform is not None:
            transform = self.transform.Pack(builder)
            BoneInitAddTransform(builder, transform)
        boneInit = BoneInitEnd(builder)
        return boneInit
