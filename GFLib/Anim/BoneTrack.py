# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy

from GFLib.Anim.DynamicRotationTrack import DynamicRotationTrackT
from GFLib.Anim.DynamicVectorTrack import DynamicVectorTrackT
from GFLib.Anim.FixedRotationTrack import FixedRotationTrackT
from GFLib.Anim.FixedVectorTrack import FixedVectorTrackT
from GFLib.Anim.Framed16RotationTrack import Framed16RotationTrackT
from GFLib.Anim.Framed16VectorTrack import Framed16VectorTrackT
from GFLib.Anim.Framed8RotationTrack import Framed8RotationTrackT
from GFLib.Anim.Framed8VectorTrack import Framed8VectorTrackT
from GFLib.Anim.RotationTrack import RotationTrackCreator
from GFLib.Anim.VectorTrack import VectorTrackCreator

np = import_numpy()

class BoneTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BoneTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBoneTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BoneTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BoneTrack
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BoneTrack
    def ScaleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # BoneTrack
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # BoneTrack
    def RotateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # BoneTrack
    def Rotate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # BoneTrack
    def TranslateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # BoneTrack
    def Translate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def BoneTrackStart(builder):
    builder.StartObject(7)

def Start(builder):
    BoneTrackStart(builder)

def BoneTrackAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    BoneTrackAddName(builder, name)

def BoneTrackAddScaleType(builder, scaleType):
    builder.PrependUint8Slot(1, scaleType, 0)

def AddScaleType(builder, scaleType):
    BoneTrackAddScaleType(builder, scaleType)

def BoneTrackAddScale(builder, scale):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(scale), 0)

def AddScale(builder, scale):
    BoneTrackAddScale(builder, scale)

def BoneTrackAddRotateType(builder, rotateType):
    builder.PrependUint8Slot(3, rotateType, 0)

def AddRotateType(builder, rotateType):
    BoneTrackAddRotateType(builder, rotateType)

def BoneTrackAddRotate(builder, rotate):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rotate), 0)

def AddRotate(builder, rotate):
    BoneTrackAddRotate(builder, rotate)

def BoneTrackAddTranslateType(builder, translateType):
    builder.PrependUint8Slot(5, translateType, 0)

def AddTranslateType(builder, translateType):
    BoneTrackAddTranslateType(builder, translateType)

def BoneTrackAddTranslate(builder, translate):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(translate), 0)

def AddTranslate(builder, translate):
    BoneTrackAddTranslate(builder, translate)

def BoneTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return BoneTrackEnd(builder)

try:
    from typing import Union
except:
    pass

class BoneTrackT(object):

    # BoneTrackT
    def __init__(self):
        self.name = None  # type: str
        self.scaleType = 0  # type: int
        self.scale = None  # type: Union[None, FixedVectorTrackT, DynamicVectorTrackT, Framed16VectorTrackT, Framed8VectorTrackT]
        self.rotateType = 0  # type: int
        self.rotate = None  # type: Union[None, FixedRotationTrackT, DynamicRotationTrackT, Framed16RotationTrackT, Framed8RotationTrackT]
        self.translateType = 0  # type: int
        self.translate = None  # type: Union[None, FixedVectorTrackT, DynamicVectorTrackT, Framed16VectorTrackT, Framed8VectorTrackT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        boneTrack = BoneTrack()
        boneTrack.Init(buf, pos)
        return cls.InitFromObj(boneTrack)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, boneTrack):
        x = BoneTrackT()
        x._UnPack(boneTrack)
        return x

    # BoneTrackT
    def _UnPack(self, boneTrack):
        if boneTrack is None:
            return
        self.name = str(boneTrack.Name(), encoding="utf-8")
        self.scaleType = boneTrack.ScaleType()
        self.scale = VectorTrackCreator(self.scaleType, boneTrack.Scale())
        self.rotateType = boneTrack.RotateType()
        self.rotate = RotationTrackCreator(self.rotateType, boneTrack.Rotate())
        self.translateType = boneTrack.TranslateType()
        self.translate = VectorTrackCreator(self.translateType, boneTrack.Translate())

    # BoneTrackT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.scale is not None:
            scale = self.scale.Pack(builder)
        if self.rotate is not None:
            rotate = self.rotate.Pack(builder)
        if self.translate is not None:
            translate = self.translate.Pack(builder)
        BoneTrackStart(builder)
        if self.name is not None:
            BoneTrackAddName(builder, name)
        BoneTrackAddScaleType(builder, self.scaleType)
        if self.scale is not None:
            BoneTrackAddScale(builder, scale)
        BoneTrackAddRotateType(builder, self.rotateType)
        if self.rotate is not None:
            BoneTrackAddRotate(builder, rotate)
        BoneTrackAddTranslateType(builder, self.translateType)
        if self.translate is not None:
            BoneTrackAddTranslate(builder, translate)
        boneTrack = BoneTrackEnd(builder)
        return boneTrack
