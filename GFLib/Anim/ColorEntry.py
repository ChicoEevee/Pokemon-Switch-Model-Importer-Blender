# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy

from GFLib.Anim.DynamicVectorTrack import DynamicVectorTrackT
from GFLib.Anim.FixedVectorTrack import FixedVectorTrackT
from GFLib.Anim.Framed16VectorTrack import Framed16VectorTrackT
from GFLib.Anim.Framed8VectorTrack import Framed8VectorTrackT
from GFLib.Anim.VectorTrack import VectorTrackCreator

np = import_numpy()

class ColorEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ColorEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsColorEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ColorEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ColorEntry
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ColorEntry
    def ColType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ColorEntry
    def Col(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def ColorEntryStart(builder):
    builder.StartObject(3)

def Start(builder):
    ColorEntryStart(builder)

def ColorEntryAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ColorEntryAddName(builder, name)

def ColorEntryAddColType(builder, colType):
    builder.PrependUint8Slot(1, colType, 0)

def AddColType(builder, colType):
    ColorEntryAddColType(builder, colType)

def ColorEntryAddCol(builder, col):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(col), 0)

def AddCol(builder, col):
    ColorEntryAddCol(builder, col)

def ColorEntryEnd(builder):
    return builder.EndObject()

def End(builder):
    return ColorEntryEnd(builder)

try:
    from typing import Union
except:
    pass

class ColorEntryT(object):

    # ColorEntryT
    def __init__(self):
        self.name = None  # type: str
        self.colType = 0  # type: int
        self.col = None  # type: Union[None, FixedVectorTrackT, DynamicVectorTrackT, Framed16VectorTrackT, Framed8VectorTrackT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        colorEntry = ColorEntry()
        colorEntry.Init(buf, pos)
        return cls.InitFromObj(colorEntry)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, colorEntry):
        x = ColorEntryT()
        x._UnPack(colorEntry)
        return x

    # ColorEntryT
    def _UnPack(self, colorEntry):
        if colorEntry is None:
            return
        self.name = colorEntry.Name()
        self.colType = colorEntry.ColType()
        self.col = VectorTrackCreator(self.colType, colorEntry.Col())

    # ColorEntryT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.col is not None:
            col = self.col.Pack(builder)
        ColorEntryStart(builder)
        if self.name is not None:
            ColorEntryAddName(builder, name)
        ColorEntryAddColType(builder, self.colType)
        if self.col is not None:
            ColorEntryAddCol(builder, col)
        colorEntry = ColorEntryEnd(builder)
        return colorEntry
