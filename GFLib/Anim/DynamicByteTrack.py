# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DynamicByteTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DynamicByteTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDynamicByteTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DynamicByteTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DynamicByteTrack
    def Byte(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # DynamicByteTrack
    def ByteAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # DynamicByteTrack
    def ByteLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DynamicByteTrack
    def ByteIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def DynamicByteTrackStart(builder):
    builder.StartObject(1)

def Start(builder):
    DynamicByteTrackStart(builder)

def DynamicByteTrackAddByte(builder, byte):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(byte), 0)

def AddByte(builder, byte):
    DynamicByteTrackAddByte(builder, byte)

def DynamicByteTrackStartByteVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartByteVector(builder, numElems):
    return DynamicByteTrackStartByteVector(builder, numElems)

def DynamicByteTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return DynamicByteTrackEnd(builder)

try:
    from typing import List
except:
    pass

class DynamicByteTrackT(object):

    # DynamicByteTrackT
    def __init__(self):
        self.byte = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dynamicByteTrack = DynamicByteTrack()
        dynamicByteTrack.Init(buf, pos)
        return cls.InitFromObj(dynamicByteTrack)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dynamicByteTrack):
        x = DynamicByteTrackT()
        x._UnPack(dynamicByteTrack)
        return x

    # DynamicByteTrackT
    def _UnPack(self, dynamicByteTrack):
        if dynamicByteTrack is None:
            return
        if not dynamicByteTrack.ByteIsNone():
            if np is None:
                self.byte = []
                for i in range(dynamicByteTrack.ByteLength()):
                    self.byte.append(dynamicByteTrack.Byte(i))
            else:
                self.byte = dynamicByteTrack.ByteAsNumpy()

    # DynamicByteTrackT
    def Pack(self, builder):
        if self.byte is not None:
            if np is not None and type(self.byte) is np.ndarray:
                byte = builder.CreateNumpyVector(self.byte)
            else:
                DynamicByteTrackStartByteVector(builder, len(self.byte))
                for i in reversed(range(len(self.byte))):
                    builder.PrependUint8(self.byte[i])
                byte = builder.EndVector()
        DynamicByteTrackStart(builder)
        if self.byte is not None:
            DynamicByteTrackAddByte(builder, byte)
        dynamicByteTrack = DynamicByteTrackEnd(builder)
        return dynamicByteTrack
