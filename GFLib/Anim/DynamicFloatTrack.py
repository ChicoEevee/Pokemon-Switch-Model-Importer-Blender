# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DynamicFloatTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DynamicFloatTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDynamicFloatTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DynamicFloatTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DynamicFloatTrack
    def Float(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DynamicFloatTrack
    def FloatAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # DynamicFloatTrack
    def FloatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DynamicFloatTrack
    def FloatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def DynamicFloatTrackStart(builder):
    builder.StartObject(1)

def Start(builder):
    DynamicFloatTrackStart(builder)

def DynamicFloatTrackAddFloat(builder, float):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(float), 0)

def AddFloat(builder, float):
    DynamicFloatTrackAddFloat(builder, float)

def DynamicFloatTrackStartFloatVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFloatVector(builder, numElems):
    return DynamicFloatTrackStartFloatVector(builder, numElems)

def DynamicFloatTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return DynamicFloatTrackEnd(builder)

try:
    from typing import List
except:
    pass

class DynamicFloatTrackT(object):

    # DynamicFloatTrackT
    def __init__(self):
        self.float = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dynamicFloatTrack = DynamicFloatTrack()
        dynamicFloatTrack.Init(buf, pos)
        return cls.InitFromObj(dynamicFloatTrack)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dynamicFloatTrack):
        x = DynamicFloatTrackT()
        x._UnPack(dynamicFloatTrack)
        return x

    # DynamicFloatTrackT
    def _UnPack(self, dynamicFloatTrack):
        if dynamicFloatTrack is None:
            return
        if not dynamicFloatTrack.FloatIsNone():
            if np is None:
                self.float = []
                for i in range(dynamicFloatTrack.FloatLength()):
                    self.float.append(dynamicFloatTrack.Float(i))
            else:
                self.float = dynamicFloatTrack.FloatAsNumpy()

    # DynamicFloatTrackT
    def Pack(self, builder):
        if self.float is not None:
            if np is not None and type(self.float) is np.ndarray:
                float = builder.CreateNumpyVector(self.float)
            else:
                DynamicFloatTrackStartFloatVector(builder, len(self.float))
                for i in reversed(range(len(self.float))):
                    builder.PrependFloat32(self.float[i])
                float = builder.EndVector()
        DynamicFloatTrackStart(builder)
        if self.float is not None:
            DynamicFloatTrackAddFloat(builder, float)
        dynamicFloatTrack = DynamicFloatTrackEnd(builder)
        return dynamicFloatTrack
