# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy

from GFLib.Anim.sVec3 import sVec3T, sVec3

np = import_numpy()

class DynamicRotationTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DynamicRotationTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDynamicRotationTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DynamicRotationTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DynamicRotationTrack
    def Co(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 6
            obj = sVec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DynamicRotationTrack
    def CoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DynamicRotationTrack
    def CoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def DynamicRotationTrackStart(builder):
    builder.StartObject(1)

def Start(builder):
    DynamicRotationTrackStart(builder)

def DynamicRotationTrackAddCo(builder, co):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(co), 0)

def AddCo(builder, co):
    DynamicRotationTrackAddCo(builder, co)

def DynamicRotationTrackStartCoVector(builder, numElems):
    return builder.StartVector(6, numElems, 2)

def StartCoVector(builder, numElems):
    return DynamicRotationTrackStartCoVector(builder, numElems)

def DynamicRotationTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return DynamicRotationTrackEnd(builder)

try:
    from typing import List
except:
    pass

class DynamicRotationTrackT(object):

    # DynamicRotationTrackT
    def __init__(self):
        self.co = None  # type: List[sVec3T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dynamicRotationTrack = DynamicRotationTrack()
        dynamicRotationTrack.Init(buf, pos)
        return cls.InitFromObj(dynamicRotationTrack)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dynamicRotationTrack):
        x = DynamicRotationTrackT()
        x._UnPack(dynamicRotationTrack)
        return x

    # DynamicRotationTrackT
    def _UnPack(self, dynamicRotationTrack):
        if dynamicRotationTrack is None:
            return
        if not dynamicRotationTrack.CoIsNone():
            self.co = []
            for i in range(dynamicRotationTrack.CoLength()):
                if dynamicRotationTrack.Co(i) is None:
                    self.co.append(None)
                else:
                    sVec3_ = sVec3T.InitFromObj(dynamicRotationTrack.Co(i))
                    self.co.append(sVec3_)

    # DynamicRotationTrackT
    def Pack(self, builder):
        if self.co is not None:
            DynamicRotationTrackStartCoVector(builder, len(self.co))
            for i in reversed(range(len(self.co))):
                self.co[i].Pack(builder)
            co = builder.EndVector()
        DynamicRotationTrackStart(builder)
        if self.co is not None:
            DynamicRotationTrackAddCo(builder, co)
        dynamicRotationTrack = DynamicRotationTrackEnd(builder)
        return dynamicRotationTrack
