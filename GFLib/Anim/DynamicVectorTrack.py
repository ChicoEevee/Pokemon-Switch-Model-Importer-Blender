# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy

from GFLib.Anim.Vec3 import Vec3T, Vec3

np = import_numpy()

class DynamicVectorTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DynamicVectorTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDynamicVectorTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DynamicVectorTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DynamicVectorTrack
    def Co(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DynamicVectorTrack
    def CoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DynamicVectorTrack
    def CoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def DynamicVectorTrackStart(builder):
    builder.StartObject(1)

def Start(builder):
    DynamicVectorTrackStart(builder)

def DynamicVectorTrackAddCo(builder, co):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(co), 0)

def AddCo(builder, co):
    DynamicVectorTrackAddCo(builder, co)

def DynamicVectorTrackStartCoVector(builder, numElems):
    return builder.StartVector(12, numElems, 4)

def StartCoVector(builder, numElems):
    return DynamicVectorTrackStartCoVector(builder, numElems)

def DynamicVectorTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return DynamicVectorTrackEnd(builder)

try:
    from typing import List
except:
    pass

class DynamicVectorTrackT(object):

    # DynamicVectorTrackT
    def __init__(self):
        self.co = None  # type: List[Vec3T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dynamicVectorTrack = DynamicVectorTrack()
        dynamicVectorTrack.Init(buf, pos)
        return cls.InitFromObj(dynamicVectorTrack)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dynamicVectorTrack):
        x = DynamicVectorTrackT()
        x._UnPack(dynamicVectorTrack)
        return x

    # DynamicVectorTrackT
    def _UnPack(self, dynamicVectorTrack):
        if dynamicVectorTrack is None:
            return
        if not dynamicVectorTrack.CoIsNone():
            self.co = []
            for i in range(dynamicVectorTrack.CoLength()):
                if dynamicVectorTrack.Co(i) is None:
                    self.co.append(None)
                else:
                    vec3_ = Vec3T.InitFromObj(dynamicVectorTrack.Co(i))
                    self.co.append(vec3_)

    # DynamicVectorTrackT
    def Pack(self, builder):
        if self.co is not None:
            DynamicVectorTrackStartCoVector(builder, len(self.co))
            for i in reversed(range(len(self.co))):
                self.co[i].Pack(builder)
            co = builder.EndVector()
        DynamicVectorTrackStart(builder)
        if self.co is not None:
            DynamicVectorTrackAddCo(builder, co)
        dynamicVectorTrack = DynamicVectorTrackEnd(builder)
        return dynamicVectorTrack
