# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FixedBooleanTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FixedBooleanTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFixedBooleanTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FixedBooleanTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FixedBooleanTrack
    def Bool(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def FixedBooleanTrackStart(builder):
    builder.StartObject(1)

def Start(builder):
    FixedBooleanTrackStart(builder)

def FixedBooleanTrackAddBool(builder, bool):
    builder.PrependBoolSlot(0, bool, 0)

def AddBool(builder, bool):
    FixedBooleanTrackAddBool(builder, bool)

def FixedBooleanTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return FixedBooleanTrackEnd(builder)


class FixedBooleanTrackT(object):

    # FixedBooleanTrackT
    def __init__(self):
        self.bool = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fixedBooleanTrack = FixedBooleanTrack()
        fixedBooleanTrack.Init(buf, pos)
        return cls.InitFromObj(fixedBooleanTrack)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fixedBooleanTrack):
        x = FixedBooleanTrackT()
        x._UnPack(fixedBooleanTrack)
        return x

    # FixedBooleanTrackT
    def _UnPack(self, fixedBooleanTrack):
        if fixedBooleanTrack is None:
            return
        self.bool = fixedBooleanTrack.Bool()

    # FixedBooleanTrackT
    def Pack(self, builder):
        FixedBooleanTrackStart(builder)
        FixedBooleanTrackAddBool(builder, self.bool)
        fixedBooleanTrack = FixedBooleanTrackEnd(builder)
        return fixedBooleanTrack
