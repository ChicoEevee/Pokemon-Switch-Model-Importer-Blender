# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy

from GFLib.Anim.sVec3 import sVec3, sVec3T

np = import_numpy()

class FixedRotationTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FixedRotationTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFixedRotationTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FixedRotationTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FixedRotationTrack
    def Co(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            obj = sVec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FixedRotationTrackStart(builder):
    builder.StartObject(1)

def Start(builder):
    FixedRotationTrackStart(builder)

def FixedRotationTrackAddCo(builder, co):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(co), 0)

def AddCo(builder, co):
    FixedRotationTrackAddCo(builder, co)

def FixedRotationTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return FixedRotationTrackEnd(builder)

try:
    from typing import Optional
except:
    pass

class FixedRotationTrackT(object):

    # FixedRotationTrackT
    def __init__(self):
        self.co = None  # type: Optional[sVec3T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fixedRotationTrack = FixedRotationTrack()
        fixedRotationTrack.Init(buf, pos)
        return cls.InitFromObj(fixedRotationTrack)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fixedRotationTrack):
        x = FixedRotationTrackT()
        x._UnPack(fixedRotationTrack)
        return x

    # FixedRotationTrackT
    def _UnPack(self, fixedRotationTrack):
        if fixedRotationTrack is None:
            return
        if fixedRotationTrack.Co() is not None:
            self.co = sVec3T.InitFromObj(fixedRotationTrack.Co())

    # FixedRotationTrackT
    def Pack(self, builder):
        FixedRotationTrackStart(builder)
        if self.co is not None:
            co = self.co.Pack(builder)
            FixedRotationTrackAddCo(builder, co)
        fixedRotationTrack = FixedRotationTrackEnd(builder)
        return fixedRotationTrack
