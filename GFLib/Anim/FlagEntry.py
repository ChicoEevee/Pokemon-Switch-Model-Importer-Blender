# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy

from GFLib.Anim.BooleanTrack import BooleanTrackCreator
from GFLib.Anim.DynamicBooleanTrack import DynamicBooleanTrackT
from GFLib.Anim.FixedBooleanTrack import FixedBooleanTrackT
from GFLib.Anim.Framed16BooleanTrack import Framed16BooleanTrackT
from GFLib.Anim.Framed8BooleanTrack import Framed8BooleanTrackT

np = import_numpy()

class FlagEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlagEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlagEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FlagEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FlagEntry
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlagEntry
    def FlagType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # FlagEntry
    def Flag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def FlagEntryStart(builder):
    builder.StartObject(3)

def Start(builder):
    FlagEntryStart(builder)

def FlagEntryAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    FlagEntryAddName(builder, name)

def FlagEntryAddFlagType(builder, flagType):
    builder.PrependUint8Slot(1, flagType, 0)

def AddFlagType(builder, flagType):
    FlagEntryAddFlagType(builder, flagType)

def FlagEntryAddFlag(builder, flag):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(flag), 0)

def AddFlag(builder, flag):
    FlagEntryAddFlag(builder, flag)

def FlagEntryEnd(builder):
    return builder.EndObject()

def End(builder):
    return FlagEntryEnd(builder)

try:
    from typing import Union
except:
    pass

class FlagEntryT(object):

    # FlagEntryT
    def __init__(self):
        self.name = None  # type: str
        self.flagType = 0  # type: int
        self.flag = None  # type: Union[None, FixedBooleanTrackT, DynamicBooleanTrackT, Framed16BooleanTrackT, Framed8BooleanTrackT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        flagEntry = FlagEntry()
        flagEntry.Init(buf, pos)
        return cls.InitFromObj(flagEntry)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, flagEntry):
        x = FlagEntryT()
        x._UnPack(flagEntry)
        return x

    # FlagEntryT
    def _UnPack(self, flagEntry):
        if flagEntry is None:
            return
        self.name = flagEntry.Name()
        self.flagType = flagEntry.FlagType()
        self.flag = BooleanTrackCreator(self.flagType, flagEntry.Flag())

    # FlagEntryT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.flag is not None:
            flag = self.flag.Pack(builder)
        FlagEntryStart(builder)
        if self.name is not None:
            FlagEntryAddName(builder, name)
        FlagEntryAddFlagType(builder, self.flagType)
        if self.flag is not None:
            FlagEntryAddFlag(builder, flag)
        flagEntry = FlagEntryEnd(builder)
        return flagEntry
