# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FloatDataTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FloatDataTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFloatDataTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FloatDataTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FloatDataTrack
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FloatDataTrackStart(builder):
    builder.StartObject(1)

def Start(builder):
    FloatDataTrackStart(builder)

def FloatDataTrackAddValue(builder, value):
    builder.PrependFloat32Slot(0, value, 0.0)

def AddValue(builder, value):
    FloatDataTrackAddValue(builder, value)

def FloatDataTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return FloatDataTrackEnd(builder)


class FloatDataTrackT(object):

    # FloatDataTrackT
    def __init__(self):
        self.value = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        floatDataTrack = FloatDataTrack()
        floatDataTrack.Init(buf, pos)
        return cls.InitFromObj(floatDataTrack)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, floatDataTrack):
        x = FloatDataTrackT()
        x._UnPack(floatDataTrack)
        return x

    # FloatDataTrackT
    def _UnPack(self, floatDataTrack):
        if floatDataTrack is None:
            return
        self.value = floatDataTrack.Value()

    # FloatDataTrackT
    def Pack(self, builder):
        FloatDataTrackStart(builder)
        FloatDataTrackAddValue(builder, self.value)
        floatDataTrack = FloatDataTrackEnd(builder)
        return floatDataTrack
