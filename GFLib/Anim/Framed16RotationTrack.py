# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy

from GFLib.Anim.sVec3 import sVec3T, sVec3

np = import_numpy()

class Framed16RotationTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Framed16RotationTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFramed16RotationTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Framed16RotationTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Framed16RotationTrack
    def Frames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # Framed16RotationTrack
    def FramesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # Framed16RotationTrack
    def FramesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Framed16RotationTrack
    def FramesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Framed16RotationTrack
    def Co(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 6
            obj = sVec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Framed16RotationTrack
    def CoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Framed16RotationTrack
    def CoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Framed16RotationTrackStart(builder):
    builder.StartObject(2)

def Start(builder):
    Framed16RotationTrackStart(builder)

def Framed16RotationTrackAddFrames(builder, frames):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(frames), 0)

def AddFrames(builder, frames):
    Framed16RotationTrackAddFrames(builder, frames)

def Framed16RotationTrackStartFramesVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartFramesVector(builder, numElems):
    return Framed16RotationTrackStartFramesVector(builder, numElems)

def Framed16RotationTrackAddCo(builder, co):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(co), 0)

def AddCo(builder, co):
    Framed16RotationTrackAddCo(builder, co)

def Framed16RotationTrackStartCoVector(builder, numElems):
    return builder.StartVector(6, numElems, 2)

def StartCoVector(builder, numElems):
    return Framed16RotationTrackStartCoVector(builder, numElems)

def Framed16RotationTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return Framed16RotationTrackEnd(builder)

try:
    from typing import List
except:
    pass

class Framed16RotationTrackT(object):

    # Framed16RotationTrackT
    def __init__(self):
        self.frames = None  # type: List[int]
        self.co = None  # type: List[sVec3T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        framed16RotationTrack = Framed16RotationTrack()
        framed16RotationTrack.Init(buf, pos)
        return cls.InitFromObj(framed16RotationTrack)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, framed16RotationTrack):
        x = Framed16RotationTrackT()
        x._UnPack(framed16RotationTrack)
        return x

    # Framed16RotationTrackT
    def _UnPack(self, framed16RotationTrack):
        if framed16RotationTrack is None:
            return
        if not framed16RotationTrack.FramesIsNone():
            if np is None:
                self.frames = []
                for i in range(framed16RotationTrack.FramesLength()):
                    self.frames.append(framed16RotationTrack.Frames(i))
            else:
                self.frames = framed16RotationTrack.FramesAsNumpy()
        if not framed16RotationTrack.CoIsNone():
            self.co = []
            for i in range(framed16RotationTrack.CoLength()):
                if framed16RotationTrack.Co(i) is None:
                    self.co.append(None)
                else:
                    sVec3_ = sVec3T.InitFromObj(framed16RotationTrack.Co(i))
                    self.co.append(sVec3_)

    # Framed16RotationTrackT
    def Pack(self, builder):
        if self.frames is not None:
            if np is not None and type(self.frames) is np.ndarray:
                frames = builder.CreateNumpyVector(self.frames)
            else:
                Framed16RotationTrackStartFramesVector(builder, len(self.frames))
                for i in reversed(range(len(self.frames))):
                    builder.PrependUint16(self.frames[i])
                frames = builder.EndVector()
        if self.co is not None:
            Framed16RotationTrackStartCoVector(builder, len(self.co))
            for i in reversed(range(len(self.co))):
                self.co[i].Pack(builder)
            co = builder.EndVector()
        Framed16RotationTrackStart(builder)
        if self.frames is not None:
            Framed16RotationTrackAddFrames(builder, frames)
        if self.co is not None:
            Framed16RotationTrackAddCo(builder, co)
        framed16RotationTrack = Framed16RotationTrackEnd(builder)
        return framed16RotationTrack
