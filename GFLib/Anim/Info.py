# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Info(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Info()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Info
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Info
    def DoesLoop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Info
    def KeyFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Info
    def FrameRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def InfoStart(builder):
    builder.StartObject(3)

def Start(builder):
    InfoStart(builder)

def InfoAddDoesLoop(builder, doesLoop):
    builder.PrependUint32Slot(0, doesLoop, 0)

def AddDoesLoop(builder, doesLoop):
    InfoAddDoesLoop(builder, doesLoop)

def InfoAddKeyFrames(builder, keyFrames):
    builder.PrependUint32Slot(1, keyFrames, 0)

def AddKeyFrames(builder, keyFrames):
    InfoAddKeyFrames(builder, keyFrames)

def InfoAddFrameRate(builder, frameRate):
    builder.PrependUint32Slot(2, frameRate, 0)

def AddFrameRate(builder, frameRate):
    InfoAddFrameRate(builder, frameRate)

def InfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return InfoEnd(builder)


class InfoT(object):

    # InfoT
    def __init__(self):
        self.doesLoop = 0  # type: int
        self.keyFrames = 0  # type: int
        self.frameRate = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        info = Info()
        info.Init(buf, pos)
        return cls.InitFromObj(info)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, info):
        x = InfoT()
        x._UnPack(info)
        return x

    # InfoT
    def _UnPack(self, info):
        if info is None:
            return
        self.doesLoop = info.DoesLoop()
        self.keyFrames = info.KeyFrames()
        self.frameRate = info.FrameRate()

    # InfoT
    def Pack(self, builder):
        InfoStart(builder)
        InfoAddDoesLoop(builder, self.doesLoop)
        InfoAddKeyFrames(builder, self.keyFrames)
        InfoAddFrameRate(builder, self.frameRate)
        info = InfoEnd(builder)
        return info
