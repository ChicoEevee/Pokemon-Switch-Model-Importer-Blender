# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class IntDataTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IntDataTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIntDataTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # IntDataTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IntDataTrack
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def IntDataTrackStart(builder):
    builder.StartObject(1)

def Start(builder):
    IntDataTrackStart(builder)

def IntDataTrackAddValue(builder, value):
    builder.PrependUint32Slot(0, value, 0)

def AddValue(builder, value):
    IntDataTrackAddValue(builder, value)

def IntDataTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return IntDataTrackEnd(builder)


class IntDataTrackT(object):

    # IntDataTrackT
    def __init__(self):
        self.value = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        intDataTrack = IntDataTrack()
        intDataTrack.Init(buf, pos)
        return cls.InitFromObj(intDataTrack)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, intDataTrack):
        x = IntDataTrackT()
        x._UnPack(intDataTrack)
        return x

    # IntDataTrackT
    def _UnPack(self, intDataTrack):
        if intDataTrack is None:
            return
        self.value = intDataTrack.Value()

    # IntDataTrackT
    def Pack(self, builder):
        IntDataTrackStart(builder)
        IntDataTrackAddValue(builder, self.value)
        intDataTrack = IntDataTrackEnd(builder)
        return intDataTrack
