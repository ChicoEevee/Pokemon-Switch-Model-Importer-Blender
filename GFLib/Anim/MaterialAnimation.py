# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy

from GFLib.Anim.MaterialTrack import MaterialTrack, MaterialTrackT

np = import_numpy()

class MaterialAnimation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MaterialAnimation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMaterialAnimation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MaterialAnimation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MaterialAnimation
    def Tracks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = MaterialTrack()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MaterialAnimation
    def TracksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MaterialAnimation
    def TracksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def MaterialAnimationStart(builder):
    builder.StartObject(1)

def Start(builder):
    MaterialAnimationStart(builder)

def MaterialAnimationAddTracks(builder, tracks):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tracks), 0)

def AddTracks(builder, tracks):
    MaterialAnimationAddTracks(builder, tracks)

def MaterialAnimationStartTracksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTracksVector(builder, numElems):
    return MaterialAnimationStartTracksVector(builder, numElems)

def MaterialAnimationEnd(builder):
    return builder.EndObject()

def End(builder):
    return MaterialAnimationEnd(builder)

try:
    from typing import List
except:
    pass

class MaterialAnimationT(object):

    # MaterialAnimationT
    def __init__(self):
        self.tracks = None  # type: List[MaterialTrackT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        materialAnimation = MaterialAnimation()
        materialAnimation.Init(buf, pos)
        return cls.InitFromObj(materialAnimation)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, materialAnimation):
        x = MaterialAnimationT()
        x._UnPack(materialAnimation)
        return x

    # MaterialAnimationT
    def _UnPack(self, materialAnimation):
        if materialAnimation is None:
            return
        if not materialAnimation.TracksIsNone():
            self.tracks = []
            for i in range(materialAnimation.TracksLength()):
                if materialAnimation.Tracks(i) is None:
                    self.tracks.append(None)
                else:
                    materialTrack_ = MaterialTrackT.InitFromObj(materialAnimation.Tracks(i))
                    self.tracks.append(materialTrack_)

    # MaterialAnimationT
    def Pack(self, builder):
        if self.tracks is not None:
            trackslist = []
            for i in range(len(self.tracks)):
                trackslist.append(self.tracks[i].Pack(builder))
            MaterialAnimationStartTracksVector(builder, len(self.tracks))
            for i in reversed(range(len(self.tracks))):
                builder.PrependUOffsetTRelative(trackslist[i])
            tracks = builder.EndVector()
        MaterialAnimationStart(builder)
        if self.tracks is not None:
            MaterialAnimationAddTracks(builder, tracks)
        materialAnimation = MaterialAnimationEnd(builder)
        return materialAnimation
