# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy

from GFLib.Anim.ColorEntry import ColorEntry, ColorEntryT
from GFLib.Anim.FlagEntry import FlagEntry, FlagEntryT
from GFLib.Anim.ShaderEntry import ShaderEntry, ShaderEntryT

np = import_numpy()

class MaterialTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MaterialTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMaterialTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MaterialTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MaterialTrack
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialTrack
    def Flags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = FlagEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MaterialTrack
    def FlagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MaterialTrack
    def FlagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # MaterialTrack
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = ShaderEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MaterialTrack
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MaterialTrack
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # MaterialTrack
    def Vectors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = ColorEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MaterialTrack
    def VectorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MaterialTrack
    def VectorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def MaterialTrackStart(builder):
    builder.StartObject(4)

def Start(builder):
    MaterialTrackStart(builder)

def MaterialTrackAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    MaterialTrackAddName(builder, name)

def MaterialTrackAddFlags(builder, flags):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(flags), 0)

def AddFlags(builder, flags):
    MaterialTrackAddFlags(builder, flags)

def MaterialTrackStartFlagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFlagsVector(builder, numElems):
    return MaterialTrackStartFlagsVector(builder, numElems)

def MaterialTrackAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def AddValues(builder, values):
    MaterialTrackAddValues(builder, values)

def MaterialTrackStartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartValuesVector(builder, numElems):
    return MaterialTrackStartValuesVector(builder, numElems)

def MaterialTrackAddVectors(builder, vectors):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(vectors), 0)

def AddVectors(builder, vectors):
    MaterialTrackAddVectors(builder, vectors)

def MaterialTrackStartVectorsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVectorsVector(builder, numElems):
    return MaterialTrackStartVectorsVector(builder, numElems)

def MaterialTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return MaterialTrackEnd(builder)

try:
    from typing import List
except:
    pass

class MaterialTrackT(object):

    # MaterialTrackT
    def __init__(self):
        self.name = None  # type: str
        self.flags = None  # type: List[FlagEntryT]
        self.values = None  # type: List[ShaderEntryT]
        self.vectors = None  # type: List[ColorEntryT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        materialTrack = MaterialTrack()
        materialTrack.Init(buf, pos)
        return cls.InitFromObj(materialTrack)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, materialTrack):
        x = MaterialTrackT()
        x._UnPack(materialTrack)
        return x

    # MaterialTrackT
    def _UnPack(self, materialTrack):
        if materialTrack is None:
            return
        self.name = materialTrack.Name()
        if not materialTrack.FlagsIsNone():
            self.flags = []
            for i in range(materialTrack.FlagsLength()):
                if materialTrack.Flags(i) is None:
                    self.flags.append(None)
                else:
                    flagEntry_ = FlagEntryT.InitFromObj(materialTrack.Flags(i))
                    self.flags.append(flagEntry_)
        if not materialTrack.ValuesIsNone():
            self.values = []
            for i in range(materialTrack.ValuesLength()):
                if materialTrack.Values(i) is None:
                    self.values.append(None)
                else:
                    shaderEntry_ = ShaderEntryT.InitFromObj(materialTrack.Values(i))
                    self.values.append(shaderEntry_)
        if not materialTrack.VectorsIsNone():
            self.vectors = []
            for i in range(materialTrack.VectorsLength()):
                if materialTrack.Vectors(i) is None:
                    self.vectors.append(None)
                else:
                    colorEntry_ = ColorEntryT.InitFromObj(materialTrack.Vectors(i))
                    self.vectors.append(colorEntry_)

    # MaterialTrackT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.flags is not None:
            flagslist = []
            for i in range(len(self.flags)):
                flagslist.append(self.flags[i].Pack(builder))
            MaterialTrackStartFlagsVector(builder, len(self.flags))
            for i in reversed(range(len(self.flags))):
                builder.PrependUOffsetTRelative(flagslist[i])
            flags = builder.EndVector()
        if self.values is not None:
            valueslist = []
            for i in range(len(self.values)):
                valueslist.append(self.values[i].Pack(builder))
            MaterialTrackStartValuesVector(builder, len(self.values))
            for i in reversed(range(len(self.values))):
                builder.PrependUOffsetTRelative(valueslist[i])
            values = builder.EndVector()
        if self.vectors is not None:
            vectorslist = []
            for i in range(len(self.vectors)):
                vectorslist.append(self.vectors[i].Pack(builder))
            MaterialTrackStartVectorsVector(builder, len(self.vectors))
            for i in reversed(range(len(self.vectors))):
                builder.PrependUOffsetTRelative(vectorslist[i])
            vectors = builder.EndVector()
        MaterialTrackStart(builder)
        if self.name is not None:
            MaterialTrackAddName(builder, name)
        if self.flags is not None:
            MaterialTrackAddFlags(builder, flags)
        if self.values is not None:
            MaterialTrackAddValues(builder, values)
        if self.vectors is not None:
            MaterialTrackAddVectors(builder, vectors)
        materialTrack = MaterialTrackEnd(builder)
        return materialTrack
