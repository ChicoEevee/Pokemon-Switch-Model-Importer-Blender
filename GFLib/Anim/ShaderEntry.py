# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy

from GFLib.Anim.FloatTrack import FloatTrackCreator

np = import_numpy()

class ShaderEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ShaderEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsShaderEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ShaderEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ShaderEntry
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ShaderEntry
    def ValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ShaderEntry
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def ShaderEntryStart(builder):
    builder.StartObject(3)

def Start(builder):
    ShaderEntryStart(builder)

def ShaderEntryAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ShaderEntryAddName(builder, name)

def ShaderEntryAddValueType(builder, valueType):
    builder.PrependUint8Slot(1, valueType, 0)

def AddValueType(builder, valueType):
    ShaderEntryAddValueType(builder, valueType)

def ShaderEntryAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    ShaderEntryAddValue(builder, value)

def ShaderEntryEnd(builder):
    return builder.EndObject()

def End(builder):
    return ShaderEntryEnd(builder)

try:
    from typing import Union
except:
    pass

class ShaderEntryT(object):

    # ShaderEntryT
    def __init__(self):
        self.name = None  # type: str
        self.valueType = 0  # type: int
        self.value = None  # type: Union[None, FixedFloatTrackT, DynamicFloatTrackT, Framed16FloatTrackT, Framed8FloatTrackT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        shaderEntry = ShaderEntry()
        shaderEntry.Init(buf, pos)
        return cls.InitFromObj(shaderEntry)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, shaderEntry):
        x = ShaderEntryT()
        x._UnPack(shaderEntry)
        return x

    # ShaderEntryT
    def _UnPack(self, shaderEntry):
        if shaderEntry is None:
            return
        self.name = shaderEntry.Name()
        self.valueType = shaderEntry.ValueType()
        self.value = FloatTrackCreator(self.valueType, shaderEntry.Value())

    # ShaderEntryT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.value is not None:
            value = self.value.Pack(builder)
        ShaderEntryStart(builder)
        if self.name is not None:
            ShaderEntryAddName(builder, name)
        ShaderEntryAddValueType(builder, self.valueType)
        if self.value is not None:
            ShaderEntryAddValue(builder, value)
        shaderEntry = ShaderEntryEnd(builder)
        return shaderEntry
