# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy

from GFLib.Anim.ByteTrack import ByteTrackCreator

np = import_numpy()

class SkinTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SkinTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSkinTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SkinTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SkinTrack
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkinTrack
    def ValuesType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SkinTrack
    def Values(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def SkinTrackStart(builder):
    builder.StartObject(3)

def Start(builder):
    SkinTrackStart(builder)

def SkinTrackAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SkinTrackAddName(builder, name)

def SkinTrackAddValuesType(builder, valuesType):
    builder.PrependUint8Slot(1, valuesType, 0)

def AddValuesType(builder, valuesType):
    SkinTrackAddValuesType(builder, valuesType)

def SkinTrackAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def AddValues(builder, values):
    SkinTrackAddValues(builder, values)

def SkinTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return SkinTrackEnd(builder)

try:
    from typing import Union
except:
    pass

class SkinTrackT(object):

    # SkinTrackT
    def __init__(self):
        self.name = None  # type: str
        self.valuesType = 0  # type: int
        self.values = None  # type: Union[None, FixedByteTrackT, DynamicByteTrackT, Framed16ByteTrackT, Framed8ByteTrackT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        skinTrack = SkinTrack()
        skinTrack.Init(buf, pos)
        return cls.InitFromObj(skinTrack)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, skinTrack):
        x = SkinTrackT()
        x._UnPack(skinTrack)
        return x

    # SkinTrackT
    def _UnPack(self, skinTrack):
        if skinTrack is None:
            return
        self.name = skinTrack.Name()
        self.valuesType = skinTrack.ValuesType()
        self.values = ByteTrackCreator(self.valuesType, skinTrack.Values())

    # SkinTrackT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.values is not None:
            values = self.values.Pack(builder)
        SkinTrackStart(builder)
        if self.name is not None:
            SkinTrackAddName(builder, name)
        SkinTrackAddValuesType(builder, self.valuesType)
        if self.values is not None:
            SkinTrackAddValues(builder, values)
        skinTrack = SkinTrackEnd(builder)
        return skinTrack
