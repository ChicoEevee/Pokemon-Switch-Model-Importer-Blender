# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StringDataTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StringDataTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStringDataTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StringDataTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StringDataTrack
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def StringDataTrackStart(builder):
    builder.StartObject(1)

def Start(builder):
    StringDataTrackStart(builder)

def StringDataTrackAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    StringDataTrackAddValue(builder, value)

def StringDataTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return StringDataTrackEnd(builder)


class StringDataTrackT(object):

    # StringDataTrackT
    def __init__(self):
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stringDataTrack = StringDataTrack()
        stringDataTrack.Init(buf, pos)
        return cls.InitFromObj(stringDataTrack)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stringDataTrack):
        x = StringDataTrackT()
        x._UnPack(stringDataTrack)
        return x

    # StringDataTrackT
    def _UnPack(self, stringDataTrack):
        if stringDataTrack is None:
            return
        self.value = stringDataTrack.Value()

    # StringDataTrackT
    def Pack(self, builder):
        if self.value is not None:
            value = builder.CreateString(self.value)
        StringDataTrackStart(builder)
        if self.value is not None:
            StringDataTrackAddValue(builder, value)
        stringDataTrack = StringDataTrackEnd(builder)
        return stringDataTrack
