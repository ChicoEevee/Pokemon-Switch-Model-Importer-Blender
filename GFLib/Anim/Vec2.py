# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Vec2(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 8

    # Vec2
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec2
    def U(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Vec2
    def V(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))

def CreateVec2(builder, u, v):
    builder.Prep(4, 8)
    builder.PrependFloat32(v)
    builder.PrependFloat32(u)
    return builder.Offset()


class Vec2T(object):

    # Vec2T
    def __init__(self):
        self.u = 0.0  # type: float
        self.v = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vec2 = Vec2()
        vec2.Init(buf, pos)
        return cls.InitFromObj(vec2)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vec2):
        x = Vec2T()
        x._UnPack(vec2)
        return x

    # Vec2T
    def _UnPack(self, vec2):
        if vec2 is None:
            return
        self.u = vec2.U()
        self.v = vec2.V()

    # Vec2T
    def Pack(self, builder):
        return CreateVec2(builder, self.u, self.v)
