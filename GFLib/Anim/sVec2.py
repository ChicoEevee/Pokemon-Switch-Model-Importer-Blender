# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class sVec2(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 4

    # sVec2
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # sVec2
    def U(self): return self._tab.Get(flatbuffers.number_types.Int16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # sVec2
    def V(self): return self._tab.Get(flatbuffers.number_types.Int16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(2))

def CreatesVec2(builder, u, v):
    builder.Prep(2, 4)
    builder.PrependInt16(v)
    builder.PrependInt16(u)
    return builder.Offset()


class sVec2T(object):

    # sVec2T
    def __init__(self):
        self.u = 0  # type: int
        self.v = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        temp = sVec2()
        temp.Init(buf, pos)
        return cls.InitFromObj(temp)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sVec2):
        x = sVec2T()
        x._UnPack(sVec2)
        return x

    # sVec2T
    def _UnPack(self, sVec2):
        if sVec2 is None:
            return
        self.u = sVec2.U()
        self.v = sVec2.V()

    # sVec2T
    def Pack(self, builder):
        return CreatesVec2(builder, self.u, self.v)
