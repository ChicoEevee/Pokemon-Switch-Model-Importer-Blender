# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Anim

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class sVec3(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 6

    # sVec3
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # sVec3
    def X(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # sVec3
    def Y(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(2))
    # sVec3
    def Z(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))

def CreatesVec3(builder, x, y, z):
    builder.Prep(2, 6)
    builder.PrependUint16(z)
    builder.PrependUint16(y)
    builder.PrependUint16(x)
    return builder.Offset()


class sVec3T(object):

    # sVec3T
    def __init__(self):
        self.x = 0  # type: int
        self.y = 0  # type: int
        self.z = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        temp = sVec3()
        temp.Init(buf, pos)
        return cls.InitFromObj(temp)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sVec3):
        x = sVec3T()
        x._UnPack(sVec3)
        return x

    # sVec3T
    def _UnPack(self, sVec3):
        if sVec3 is None:
            return
        self.x = sVec3.X()
        self.y = sVec3.Y()
        self.z = sVec3.Z()

    # sVec3T
    def Pack(self, builder):
        return CreatesVec3(builder, self.x, self.y, self.z)
