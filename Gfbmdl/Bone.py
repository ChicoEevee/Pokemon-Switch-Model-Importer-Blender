# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Gfbmdl

import flatbuffers

class Bone(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBone(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Bone()
        x.Init(buf, n + offset)
        return x

    # Bone
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Bone
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Bone
    def BoneType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Bone
    def Parent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Bone
    def Zero(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Bone
    def Visible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Bone
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from .Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Bone
    def Rotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from .Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Bone
    def Translation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = o + self._tab.Pos
            from .Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Bone
    def RadiusStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            from .Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Bone
    def RadiusEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = o + self._tab.Pos
            from .Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Bone
    def RigidCheck(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = o + self._tab.Pos
            from .BoneRigidData import BoneRigidData
            obj = BoneRigidData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BoneStart(builder): builder.StartObject(11)
def BoneAddName(builder, Name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(Name), 0)
def BoneAddBoneType(builder, BoneType): builder.PrependUint32Slot(1, BoneType, 0)
def BoneAddParent(builder, Parent): builder.PrependInt32Slot(2, Parent, 0)
def BoneAddZero(builder, Zero): builder.PrependUint32Slot(3, Zero, 0)
def BoneAddVisible(builder, Visible): builder.PrependBoolSlot(4, Visible, 0)
def BoneAddScale(builder, Scale): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(Scale), 0)
def BoneAddRotation(builder, Rotation): builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(Rotation), 0)
def BoneAddTranslation(builder, Translation): builder.PrependStructSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(Translation), 0)
def BoneAddRadiusStart(builder, RadiusStart): builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(RadiusStart), 0)
def BoneAddRadiusEnd(builder, RadiusEnd): builder.PrependStructSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(RadiusEnd), 0)
def BoneAddRigidCheck(builder, RigidCheck): builder.PrependStructSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(RigidCheck), 0)
def BoneEnd(builder): return builder.EndObject()
