# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Gfbmdl

import flatbuffers

class Group(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGroup(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Group()
        x.Init(buf, n + offset)
        return x

    # Group
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Group
    def BoneIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Group
    def MeshIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Group
    def Bounding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .BoundingBox import BoundingBox
            obj = BoundingBox()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Group
    def Layer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def GroupStart(builder): builder.StartObject(4)
def GroupAddBoneIndex(builder, BoneIndex): builder.PrependUint32Slot(0, BoneIndex, 0)
def GroupAddMeshIndex(builder, MeshIndex): builder.PrependUint32Slot(1, MeshIndex, 0)
def GroupAddBounding(builder, Bounding): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(Bounding), 0)
def GroupAddLayer(builder, Layer): builder.PrependUint32Slot(3, Layer, 0)
def GroupEnd(builder): return builder.EndObject()
