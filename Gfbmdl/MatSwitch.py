# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Gfbmdl

import flatbuffers

class MatSwitch(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMatSwitch(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MatSwitch()
        x.Init(buf, n + offset)
        return x

    # MatSwitch
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MatSwitch
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MatSwitch
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def MatSwitchStart(builder): builder.StartObject(2)
def MatSwitchAddName(builder, Name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(Name), 0)
def MatSwitchAddValue(builder, Value): builder.PrependBoolSlot(1, Value, 0)
def MatSwitchEnd(builder): return builder.EndObject()
