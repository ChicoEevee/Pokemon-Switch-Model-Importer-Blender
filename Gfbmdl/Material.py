# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Gfbmdl

import flatbuffers

class Material(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMaterial(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Material()
        x.Init(buf, n + offset)
        return x

    # Material
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Material
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Material
    def ShaderGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Material
    def RenderLayer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Material
    def Unknown1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Material
    def Unknown2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Material
    def Parameter1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Material
    def Parameter2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Material
    def Parameter3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Material
    def ShaderIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Material
    def Parameter4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Material
    def Parameter5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Material
    def TextureMaps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .TextureMap import TextureMap
            obj = TextureMap()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Material
    def TextureMapsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Material
    def Switches(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MatSwitch import MatSwitch
            obj = MatSwitch()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Material
    def SwitchesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Material
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MatFloat import MatFloat
            obj = MatFloat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Material
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Material
    def Colors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MatColor import MatColor
            obj = MatColor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Material
    def ColorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Material
    def Unknown3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Material
    def Unknown4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Material
    def Unknown5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Material
    def Unknown6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Material
    def Unknown7(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Material
    def Common(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .MaterialCommon import MaterialCommon
            obj = MaterialCommon()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def MaterialStart(builder): builder.StartObject(21)
def MaterialAddName(builder, Name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(Name), 0)
def MaterialAddShaderGroup(builder, ShaderGroup): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ShaderGroup), 0)
def MaterialAddRenderLayer(builder, RenderLayer): builder.PrependInt32Slot(2, RenderLayer, 0)
def MaterialAddUnknown1(builder, Unknown1): builder.PrependUint8Slot(3, Unknown1, 0)
def MaterialAddUnknown2(builder, Unknown2): builder.PrependUint8Slot(4, Unknown2, 0)
def MaterialAddParameter1(builder, Parameter1): builder.PrependInt32Slot(5, Parameter1, 0)
def MaterialAddParameter2(builder, Parameter2): builder.PrependInt32Slot(6, Parameter2, 0)
def MaterialAddParameter3(builder, Parameter3): builder.PrependInt32Slot(7, Parameter3, 0)
def MaterialAddShaderIndex(builder, ShaderIndex): builder.PrependInt32Slot(8, ShaderIndex, 0)
def MaterialAddParameter4(builder, Parameter4): builder.PrependInt32Slot(9, Parameter4, 0)
def MaterialAddParameter5(builder, Parameter5): builder.PrependInt32Slot(10, Parameter5, 0)
def MaterialAddTextureMaps(builder, TextureMaps): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(TextureMaps), 0)
def MaterialStartTextureMapsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MaterialAddSwitches(builder, Switches): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(Switches), 0)
def MaterialStartSwitchesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MaterialAddValues(builder, Values): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(Values), 0)
def MaterialStartValuesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MaterialAddColors(builder, Colors): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(Colors), 0)
def MaterialStartColorsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MaterialAddUnknown3(builder, Unknown3): builder.PrependUint8Slot(15, Unknown3, 0)
def MaterialAddUnknown4(builder, Unknown4): builder.PrependUint8Slot(16, Unknown4, 0)
def MaterialAddUnknown5(builder, Unknown5): builder.PrependUint8Slot(17, Unknown5, 0)
def MaterialAddUnknown6(builder, Unknown6): builder.PrependUint8Slot(18, Unknown6, 0)
def MaterialAddUnknown7(builder, Unknown7): builder.PrependUint8Slot(19, Unknown7, 0)
def MaterialAddCommon(builder, Common): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(Common), 0)
def MaterialEnd(builder): return builder.EndObject()
