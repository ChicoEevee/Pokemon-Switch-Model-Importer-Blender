# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Gfbmdl

import flatbuffers

class TextureMap(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTextureMap(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TextureMap()
        x.Init(buf, n + offset)
        return x

    # TextureMap
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TextureMap
    def Sampler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TextureMap
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TextureMap
    def Params(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .TextureMapping import TextureMapping
            obj = TextureMapping()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TextureMapStart(builder): builder.StartObject(3)
def TextureMapAddSampler(builder, Sampler): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(Sampler), 0)
def TextureMapAddIndex(builder, Index): builder.PrependInt32Slot(1, Index, 0)
def TextureMapAddParams(builder, Params): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(Params), 0)
def TextureMapEnd(builder): return builder.EndObject()
