# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Gfbmdl

import flatbuffers

class TextureMapping(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTextureMapping(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TextureMapping()
        x.Init(buf, n + offset)
        return x

    # TextureMapping
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TextureMapping
    def Unknown1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TextureMapping
    def WrapModeX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TextureMapping
    def WrapModeY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TextureMapping
    def WrapModeZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TextureMapping
    def Unknown5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TextureMapping
    def Unknown6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TextureMapping
    def Unknown7(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TextureMapping
    def Unknown8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TextureMapping
    def LodBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def TextureMappingStart(builder): builder.StartObject(9)
def TextureMappingAddUnknown1(builder, Unknown1): builder.PrependUint32Slot(0, Unknown1, 0)
def TextureMappingAddWrapModeX(builder, WrapModeX): builder.PrependUint32Slot(1, WrapModeX, 0)
def TextureMappingAddWrapModeY(builder, WrapModeY): builder.PrependUint32Slot(2, WrapModeY, 0)
def TextureMappingAddWrapModeZ(builder, WrapModeZ): builder.PrependUint32Slot(3, WrapModeZ, 0)
def TextureMappingAddUnknown5(builder, Unknown5): builder.PrependUint32Slot(4, Unknown5, 0)
def TextureMappingAddUnknown6(builder, Unknown6): builder.PrependUint32Slot(5, Unknown6, 0)
def TextureMappingAddUnknown7(builder, Unknown7): builder.PrependUint32Slot(6, Unknown7, 0)
def TextureMappingAddUnknown8(builder, Unknown8): builder.PrependUint32Slot(7, Unknown8, 0)
def TextureMappingAddLodBias(builder, lodBias): builder.PrependFloat32Slot(8, lodBias, 0.0)
def TextureMappingEnd(builder): return builder.EndObject()
