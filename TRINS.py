# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TRINS(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TRINS()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTRINS(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TRINS
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TRINS
    def InstanceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TRINS
    def Unk1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1

    # TRINS
    def InstanceCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 2

    # TRINS
    def Res3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TRINS
    def Buffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from INS import INS
            obj = INS()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TRINSStart(builder):
    builder.StartObject(5)

def Start(builder):
    TRINSStart(builder)

def TRINSAddInstanceType(builder, instanceType):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(instanceType), 0)

def AddInstanceType(builder, instanceType):
    TRINSAddInstanceType(builder, instanceType)

def TRINSAddUnk1(builder, unk1):
    builder.PrependUint32Slot(1, unk1, 1)

def AddUnk1(builder, unk1):
    TRINSAddUnk1(builder, unk1)

def TRINSAddParticleCount(builder, particleCount):
    builder.PrependUint32Slot(2, particleCount, 2)

def AddParticleCount(builder, particleCount):
    TRINSAddParticleCount(builder, particleCount)

def TRINSAddRes3(builder, res3):
    builder.PrependUint32Slot(3, res3, 0)

def AddRes3(builder, res3):
    TRINSAddRes3(builder, res3)

def TRINSAddBuffer(builder, buffer):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(buffer), 0)

def AddBuffer(builder, buffer):
    TRINSAddBuffer(builder, buffer)

def TRINSEnd(builder):
    return builder.EndObject()

def End(builder):
    return TRINSEnd(builder)
