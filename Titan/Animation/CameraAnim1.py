# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Animation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CameraAnim1(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CameraAnim1()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCameraAnim1(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CameraAnim1
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CameraAnim1
    def ClippingStartType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # CameraAnim1
    def ClippingStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # CameraAnim1
    def ClippingEndType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # CameraAnim1
    def ClippingEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # CameraAnim1
    def FovType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # CameraAnim1
    def Fov(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def CameraAnim1Start(builder):
    builder.StartObject(6)

def Start(builder):
    CameraAnim1Start(builder)

def CameraAnim1AddClippingStartType(builder, clippingStartType):
    builder.PrependUint8Slot(0, clippingStartType, 0)

def AddClippingStartType(builder, clippingStartType):
    CameraAnim1AddClippingStartType(builder, clippingStartType)

def CameraAnim1AddClippingStart(builder, clippingStart):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(clippingStart), 0)

def AddClippingStart(builder, clippingStart):
    CameraAnim1AddClippingStart(builder, clippingStart)

def CameraAnim1AddClippingEndType(builder, clippingEndType):
    builder.PrependUint8Slot(2, clippingEndType, 0)

def AddClippingEndType(builder, clippingEndType):
    CameraAnim1AddClippingEndType(builder, clippingEndType)

def CameraAnim1AddClippingEnd(builder, clippingEnd):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(clippingEnd), 0)

def AddClippingEnd(builder, clippingEnd):
    CameraAnim1AddClippingEnd(builder, clippingEnd)

def CameraAnim1AddFovType(builder, fovType):
    builder.PrependUint8Slot(4, fovType, 0)

def AddFovType(builder, fovType):
    CameraAnim1AddFovType(builder, fovType)

def CameraAnim1AddFov(builder, fov):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(fov), 0)

def AddFov(builder, fov):
    CameraAnim1AddFov(builder, fov)

def CameraAnim1End(builder):
    return builder.EndObject()

def End(builder):
    return CameraAnim1End(builder)
