# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Animation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TRCMA(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TRCMA()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTRCMA(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TRCMA
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TRCMA
    def Info(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Animation.AnimationInfo import AnimationInfo
            obj = AnimationInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRCMA
    def Anim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Animation.CamAnimation import CamAnimation
            obj = CamAnimation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TRCMAStart(builder):
    builder.StartObject(2)

def Start(builder):
    TRCMAStart(builder)

def TRCMAAddInfo(builder, info):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(info), 0)

def AddInfo(builder, info):
    TRCMAAddInfo(builder, info)

def TRCMAAddAnim(builder, anim):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(anim), 0)

def AddAnim(builder, anim):
    TRCMAAddAnim(builder, anim)

def TRCMAEnd(builder):
    return builder.EndObject()

def End(builder):
    return TRCMAEnd(builder)
