# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Bone(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Bone()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBone(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Bone
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Bone
    def InheritScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Bone
    def InfluenceSkinning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Bone
    def Matrix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Model.BoneMatrix import BoneMatrix
            obj = BoneMatrix()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BoneStart(builder):
    builder.StartObject(3)

def Start(builder):
    BoneStart(builder)

def BoneAddInheritScale(builder, inheritScale):
    builder.PrependBoolSlot(0, inheritScale, 0)

def AddInheritScale(builder, inheritScale):
    BoneAddInheritScale(builder, inheritScale)

def BoneAddInfluenceSkinning(builder, influenceSkinning):
    builder.PrependBoolSlot(1, influenceSkinning, 0)

def AddInfluenceSkinning(builder, influenceSkinning):
    BoneAddInfluenceSkinning(builder, influenceSkinning)

def BoneAddMatrix(builder, matrix):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(matrix), 0)

def AddMatrix(builder, matrix):
    BoneAddMatrix(builder, matrix)

def BoneEnd(builder):
    return builder.EndObject()

def End(builder):
    return BoneEnd(builder)

import Titan.Model.BoneMatrix
try:
    from typing import Optional
except:
    pass

class BoneT(object):

    # BoneT
    def __init__(self):
        self.inheritScale = False  # type: bool
        self.influenceSkinning = False  # type: bool
        self.matrix = None  # type: Optional[Titan.Model.BoneMatrix.BoneMatrixT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        bone = Bone()
        bone.Init(buf, pos)
        return cls.InitFromObj(bone)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, bone):
        x = BoneT()
        x._UnPack(bone)
        return x

    # BoneT
    def _UnPack(self, bone):
        if bone is None:
            return
        self.inheritScale = bone.InheritScale()
        self.influenceSkinning = bone.InfluenceSkinning()
        if bone.Matrix() is not None:
            self.matrix = Titan.Model.BoneMatrix.BoneMatrixT.InitFromObj(bone.Matrix())

    # BoneT
    def Pack(self, builder):
        if self.matrix is not None:
            matrix = self.matrix.Pack(builder)
        BoneStart(builder)
        BoneAddInheritScale(builder, self.inheritScale)
        BoneAddInfluenceSkinning(builder, self.influenceSkinning)
        if self.matrix is not None:
            BoneAddMatrix(builder, matrix)
        bone = BoneEnd(builder)
        return bone
