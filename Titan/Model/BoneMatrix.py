# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BoneMatrix(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BoneMatrix()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBoneMatrix(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BoneMatrix
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BoneMatrix
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BoneMatrix
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BoneMatrix
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BoneMatrix
    def W(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BoneMatrixStart(builder):
    builder.StartObject(4)

def Start(builder):
    BoneMatrixStart(builder)

def BoneMatrixAddX(builder, x):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(x), 0)

def AddX(builder, x):
    BoneMatrixAddX(builder, x)

def BoneMatrixAddY(builder, y):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(y), 0)

def AddY(builder, y):
    BoneMatrixAddY(builder, y)

def BoneMatrixAddZ(builder, z):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(z), 0)

def AddZ(builder, z):
    BoneMatrixAddZ(builder, z)

def BoneMatrixAddW(builder, w):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(w), 0)

def AddW(builder, w):
    BoneMatrixAddW(builder, w)

def BoneMatrixEnd(builder):
    return builder.EndObject()

def End(builder):
    return BoneMatrixEnd(builder)
