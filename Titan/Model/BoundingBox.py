# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BoundingBox(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BoundingBox()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBoundingBox(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BoundingBox
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BoundingBox
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from Titan.Model.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BoundingBox
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from Titan.Model.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BoundingBoxStart(builder):
    builder.StartObject(2)

def Start(builder):
    BoundingBoxStart(builder)

def BoundingBoxAddMin(builder, min):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(min), 0)

def AddMin(builder, min):
    BoundingBoxAddMin(builder, min)

def BoundingBoxAddMax(builder, max):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(max), 0)

def AddMax(builder, max):
    BoundingBoxAddMax(builder, max)

def BoundingBoxEnd(builder):
    return builder.EndObject()

def End(builder):
    return BoundingBoxEnd(builder)

import Titan.Model.Vec3
try:
    from typing import Optional
except:
    pass

class BoundingBoxT(object):

    # BoundingBoxT
    def __init__(self):
        self.min = None  # type: Optional[Titan.Model.Vec3.Vec3T]
        self.max = None  # type: Optional[Titan.Model.Vec3.Vec3T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        boundingBox = BoundingBox()
        boundingBox.Init(buf, pos)
        return cls.InitFromObj(boundingBox)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, boundingBox):
        x = BoundingBoxT()
        x._UnPack(boundingBox)
        return x

    # BoundingBoxT
    def _UnPack(self, boundingBox):
        if boundingBox is None:
            return
        if boundingBox.Min() is not None:
            self.min = Titan.Model.Vec3.Vec3T.InitFromObj(boundingBox.Min())
        if boundingBox.Max() is not None:
            self.max = Titan.Model.Vec3.Vec3T.InitFromObj(boundingBox.Max())

    # BoundingBoxT
    def Pack(self, builder):
        BoundingBoxStart(builder)
        if self.min is not None:
            min = self.min.Pack(builder)
            BoundingBoxAddMin(builder, min)
        if self.max is not None:
            max = self.max.Pack(builder)
            BoundingBoxAddMax(builder, max)
        boundingBox = BoundingBoxEnd(builder)
        return boundingBox
