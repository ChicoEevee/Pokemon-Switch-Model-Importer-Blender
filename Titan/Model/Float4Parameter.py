# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Float4Parameter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Float4Parameter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFloat4Parameter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Float4Parameter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Float4Parameter
    def ColorName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Float4Parameter
    def ColorValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from Titan.Model.RGBA import RGBA
            obj = RGBA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Float4ParameterStart(builder):
    builder.StartObject(2)

def Start(builder):
    Float4ParameterStart(builder)

def Float4ParameterAddColorName(builder, colorName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(colorName), 0)

def AddColorName(builder, colorName):
    Float4ParameterAddColorName(builder, colorName)

def Float4ParameterAddColorValue(builder, colorValue):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(colorValue), 0)

def AddColorValue(builder, colorValue):
    Float4ParameterAddColorValue(builder, colorValue)

def Float4ParameterEnd(builder):
    return builder.EndObject()

def End(builder):
    return Float4ParameterEnd(builder)
