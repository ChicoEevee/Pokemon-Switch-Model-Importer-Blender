# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FloatParameter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FloatParameter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFloatParameter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FloatParameter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FloatParameter
    def FloatName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FloatParameter
    def FloatValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FloatParameterStart(builder):
    builder.StartObject(2)

def Start(builder):
    FloatParameterStart(builder)

def FloatParameterAddFloatName(builder, floatName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(floatName), 0)

def AddFloatName(builder, floatName):
    FloatParameterAddFloatName(builder, floatName)

def FloatParameterAddFloatValue(builder, floatValue):
    builder.PrependFloat32Slot(1, floatValue, 0.0)

def AddFloatValue(builder, floatValue):
    FloatParameterAddFloatValue(builder, floatValue)

def FloatParameterEnd(builder):
    return builder.EndObject()

def End(builder):
    return FloatParameterEnd(builder)
