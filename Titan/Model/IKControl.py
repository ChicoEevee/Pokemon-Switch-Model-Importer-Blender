# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class IKControl(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IKControl()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIKControl(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # IKControl
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IKControl
    def IkName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IKControl
    def IkChainStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IKControl
    def IkChainEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IKControl
    def IkType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IKControl
    def Res4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IKControl
    def IkPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # IKControl
    def IkRot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec4 import Vec4
            obj = Vec4()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def IKControlStart(builder):
    builder.StartObject(7)

def Start(builder):
    IKControlStart(builder)

def IKControlAddIkName(builder, ikName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ikName), 0)

def AddIkName(builder, ikName):
    IKControlAddIkName(builder, ikName)

def IKControlAddIkChainStart(builder, ikChainStart):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ikChainStart), 0)

def AddIkChainStart(builder, ikChainStart):
    IKControlAddIkChainStart(builder, ikChainStart)

def IKControlAddIkChainEnd(builder, ikChainEnd):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ikChainEnd), 0)

def AddIkChainEnd(builder, ikChainEnd):
    IKControlAddIkChainEnd(builder, ikChainEnd)

def IKControlAddIkType(builder, ikType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ikType), 0)

def AddIkType(builder, ikType):
    IKControlAddIkType(builder, ikType)

def IKControlAddRes4(builder, res4):
    builder.PrependUint32Slot(4, res4, 0)

def AddRes4(builder, res4):
    IKControlAddRes4(builder, res4)

def IKControlAddIkPos(builder, ikPos):
    builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ikPos), 0)

def AddIkPos(builder, ikPos):
    IKControlAddIkPos(builder, ikPos)

def IKControlAddIkRot(builder, ikRot):
    builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ikRot), 0)

def AddIkRot(builder, ikRot):
    IKControlAddIkRot(builder, ikRot)

def IKControlEnd(builder):
    return builder.EndObject()

def End(builder):
    return IKControlEnd(builder)
