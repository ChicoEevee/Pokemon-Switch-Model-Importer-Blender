# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Influence(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Influence()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInfluence(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Influence
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Influence
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Influence
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def InfluenceStart(builder):
    builder.StartObject(2)

def Start(builder):
    InfluenceStart(builder)

def InfluenceAddIndex(builder, index):
    builder.PrependUint32Slot(0, index, 0)

def AddIndex(builder, index):
    InfluenceAddIndex(builder, index)

def InfluenceAddScale(builder, scale):
    builder.PrependFloat32Slot(1, scale, 0.0)

def AddScale(builder, scale):
    InfluenceAddScale(builder, scale)

def InfluenceEnd(builder):
    return builder.EndObject()

def End(builder):
    return InfluenceEnd(builder)


class InfluenceT(object):

    # InfluenceT
    def __init__(self):
        self.index = 0  # type: int
        self.scale = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        influence = Influence()
        influence.Init(buf, pos)
        return cls.InitFromObj(influence)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, influence):
        x = InfluenceT()
        x._UnPack(influence)
        return x

    # InfluenceT
    def _UnPack(self, influence):
        if influence is None:
            return
        self.index = influence.Index()
        self.scale = influence.Scale()

    # InfluenceT
    def Pack(self, builder):
        InfluenceStart(builder)
        InfluenceAddIndex(builder, self.index)
        InfluenceAddScale(builder, self.scale)
        influence = InfluenceEnd(builder)
        return influence
