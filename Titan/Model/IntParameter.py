# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class IntParameter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IntParameter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIntParameter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # IntParameter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IntParameter
    def IntName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IntParameter
    def IntValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

def IntParameterStart(builder):
    builder.StartObject(2)

def Start(builder):
    IntParameterStart(builder)

def IntParameterAddIntName(builder, intName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(intName), 0)

def AddIntName(builder, intName):
    IntParameterAddIntName(builder, intName)

def IntParameterAddIntValue(builder, intValue):
    builder.PrependInt32Slot(1, intValue, -1)

def AddIntValue(builder, intValue):
    IntParameterAddIntValue(builder, intValue)

def IntParameterEnd(builder):
    return builder.EndObject()

def End(builder):
    return IntParameterEnd(builder)
