# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Material(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Material()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMaterial(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Material
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Material
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Material
    def Shaders(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.Shader import Shader
            obj = Shader()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Material
    def ShadersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Material
    def ShadersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Material
    def Textures(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.Texture import Texture
            obj = Texture()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Material
    def TexturesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Material
    def TexturesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Material
    def Samplers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.SamplerState import SamplerState
            obj = SamplerState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Material
    def SamplersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Material
    def SamplersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Material
    def FloatParameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.FloatParameter import FloatParameter
            obj = FloatParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Material
    def FloatParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Material
    def FloatParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Material
    def Unk5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Material
    def Float4LightParameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.Float4Parameter import Float4Parameter
            obj = Float4Parameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Material
    def Float4LightParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Material
    def Float4LightParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Material
    def Float4Parameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.Float4Parameter import Float4Parameter
            obj = Float4Parameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Material
    def Float4ParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Material
    def Float4ParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Material
    def Unk8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Material
    def IntParameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.IntParameter import IntParameter
            obj = IntParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Material
    def IntParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Material
    def IntParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # Material
    def Unk10(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Material
    def Unk11(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Material
    def Unk12(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Material
    def ByteExtra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Model.Byte_Extra import Byte_Extra
            obj = Byte_Extra()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Material
    def IntExtra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Model.Int_Extra import Int_Extra
            obj = Int_Extra()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Material
    def AlphaType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MaterialStart(builder):
    builder.StartObject(16)

def Start(builder):
    MaterialStart(builder)

def MaterialAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    MaterialAddName(builder, name)

def MaterialAddShaders(builder, shaders):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(shaders), 0)

def AddShaders(builder, shaders):
    MaterialAddShaders(builder, shaders)

def MaterialStartShadersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartShadersVector(builder, numElems: int) -> int:
    return MaterialStartShadersVector(builder, numElems)

def MaterialAddTextures(builder, textures):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(textures), 0)

def AddTextures(builder, textures):
    MaterialAddTextures(builder, textures)

def MaterialStartTexturesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTexturesVector(builder, numElems: int) -> int:
    return MaterialStartTexturesVector(builder, numElems)

def MaterialAddSamplers(builder, samplers):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(samplers), 0)

def AddSamplers(builder, samplers):
    MaterialAddSamplers(builder, samplers)

def MaterialStartSamplersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSamplersVector(builder, numElems: int) -> int:
    return MaterialStartSamplersVector(builder, numElems)

def MaterialAddFloatParameter(builder, floatParameter):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(floatParameter), 0)

def AddFloatParameter(builder, floatParameter):
    MaterialAddFloatParameter(builder, floatParameter)

def MaterialStartFloatParameterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFloatParameterVector(builder, numElems: int) -> int:
    return MaterialStartFloatParameterVector(builder, numElems)

def MaterialAddUnk5(builder, unk5):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(unk5), 0)

def AddUnk5(builder, unk5):
    MaterialAddUnk5(builder, unk5)

def MaterialAddFloat4LightParameter(builder, float4LightParameter):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(float4LightParameter), 0)

def AddFloat4LightParameter(builder, float4LightParameter):
    MaterialAddFloat4LightParameter(builder, float4LightParameter)

def MaterialStartFloat4LightParameterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFloat4LightParameterVector(builder, numElems: int) -> int:
    return MaterialStartFloat4LightParameterVector(builder, numElems)

def MaterialAddFloat4Parameter(builder, float4Parameter):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(float4Parameter), 0)

def AddFloat4Parameter(builder, float4Parameter):
    MaterialAddFloat4Parameter(builder, float4Parameter)

def MaterialStartFloat4ParameterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFloat4ParameterVector(builder, numElems: int) -> int:
    return MaterialStartFloat4ParameterVector(builder, numElems)

def MaterialAddUnk8(builder, unk8):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(unk8), 0)

def AddUnk8(builder, unk8):
    MaterialAddUnk8(builder, unk8)

def MaterialAddIntParameter(builder, intParameter):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(intParameter), 0)

def AddIntParameter(builder, intParameter):
    MaterialAddIntParameter(builder, intParameter)

def MaterialStartIntParameterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIntParameterVector(builder, numElems: int) -> int:
    return MaterialStartIntParameterVector(builder, numElems)

def MaterialAddUnk10(builder, unk10):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(unk10), 0)

def AddUnk10(builder, unk10):
    MaterialAddUnk10(builder, unk10)

def MaterialAddUnk11(builder, unk11):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(unk11), 0)

def AddUnk11(builder, unk11):
    MaterialAddUnk11(builder, unk11)

def MaterialAddUnk12(builder, unk12):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(unk12), 0)

def AddUnk12(builder, unk12):
    MaterialAddUnk12(builder, unk12)

def MaterialAddByteExtra(builder, byteExtra):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(byteExtra), 0)

def AddByteExtra(builder, byteExtra):
    MaterialAddByteExtra(builder, byteExtra)

def MaterialAddIntExtra(builder, intExtra):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(intExtra), 0)

def AddIntExtra(builder, intExtra):
    MaterialAddIntExtra(builder, intExtra)

def MaterialAddAlphaType(builder, alphaType):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(alphaType), 0)

def AddAlphaType(builder, alphaType):
    MaterialAddAlphaType(builder, alphaType)

def MaterialEnd(builder):
    return builder.EndObject()

def End(builder):
    return MaterialEnd(builder)
