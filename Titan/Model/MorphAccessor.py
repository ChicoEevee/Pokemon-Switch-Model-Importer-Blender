# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MorphAccessor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MorphAccessor()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMorphAccessor(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MorphAccessor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MorphAccessor
    def Unk0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MorphAccessor
    def Attribute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MorphAccessor
    def Unk1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MorphAccessor
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MorphAccessor
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def MorphAccessorStart(builder):
    builder.StartObject(5)

def Start(builder):
    MorphAccessorStart(builder)

def MorphAccessorAddUnk0(builder, unk0):
    builder.PrependUint32Slot(0, unk0, 0)

def AddUnk0(builder, unk0):
    MorphAccessorAddUnk0(builder, unk0)

def MorphAccessorAddAttribute(builder, attribute):
    builder.PrependUint32Slot(1, attribute, 0)

def AddAttribute(builder, attribute):
    MorphAccessorAddAttribute(builder, attribute)

def MorphAccessorAddUnk1(builder, unk1):
    builder.PrependUint32Slot(2, unk1, 0)

def AddUnk1(builder, unk1):
    MorphAccessorAddUnk1(builder, unk1)

def MorphAccessorAddType(builder, type):
    builder.PrependUint32Slot(3, type, 0)

def AddType(builder, type):
    MorphAccessorAddType(builder, type)

def MorphAccessorAddPosition(builder, position):
    builder.PrependUint32Slot(4, position, 0)

def AddPosition(builder, position):
    MorphAccessorAddPosition(builder, position)

def MorphAccessorEnd(builder):
    return builder.EndObject()

def End(builder):
    return MorphAccessorEnd(builder)


class MorphAccessorT(object):

    # MorphAccessorT
    def __init__(self):
        self.unk0 = 0  # type: int
        self.attribute = 0  # type: int
        self.unk1 = 0  # type: int
        self.type = 0  # type: int
        self.position = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        morphAccessor = MorphAccessor()
        morphAccessor.Init(buf, pos)
        return cls.InitFromObj(morphAccessor)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, morphAccessor):
        x = MorphAccessorT()
        x._UnPack(morphAccessor)
        return x

    # MorphAccessorT
    def _UnPack(self, morphAccessor):
        if morphAccessor is None:
            return
        self.unk0 = morphAccessor.Unk0()
        self.attribute = morphAccessor.Attribute()
        self.unk1 = morphAccessor.Unk1()
        self.type = morphAccessor.Type()
        self.position = morphAccessor.Position()

    # MorphAccessorT
    def Pack(self, builder):
        MorphAccessorStart(builder)
        MorphAccessorAddUnk0(builder, self.unk0)
        MorphAccessorAddAttribute(builder, self.attribute)
        MorphAccessorAddUnk1(builder, self.unk1)
        MorphAccessorAddType(builder, self.type)
        MorphAccessorAddPosition(builder, self.position)
        morphAccessor = MorphAccessorEnd(builder)
        return morphAccessor
