# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MorphBuffer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MorphBuffer()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMorphBuffer(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MorphBuffer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MorphBuffer
    def Buffer(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # MorphBuffer
    def BufferAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # MorphBuffer
    def BufferLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MorphBuffer
    def BufferIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def MorphBufferStart(builder):
    builder.StartObject(1)

def Start(builder):
    MorphBufferStart(builder)

def MorphBufferAddBuffer(builder, buffer):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffer), 0)

def AddBuffer(builder, buffer):
    MorphBufferAddBuffer(builder, buffer)

def MorphBufferStartBufferVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartBufferVector(builder, numElems):
    return MorphBufferStartBufferVector(builder, numElems)

def MorphBufferEnd(builder):
    return builder.EndObject()

def End(builder):
    return MorphBufferEnd(builder)

try:
    from typing import List
except:
    pass

class MorphBufferT(object):

    # MorphBufferT
    def __init__(self):
        self.buffer = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        morphBuffer = MorphBuffer()
        morphBuffer.Init(buf, pos)
        return cls.InitFromObj(morphBuffer)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, morphBuffer):
        x = MorphBufferT()
        x._UnPack(morphBuffer)
        return x

    # MorphBufferT
    def _UnPack(self, morphBuffer):
        if morphBuffer is None:
            return
        if not morphBuffer.BufferIsNone():
            if np is None:
                self.buffer = []
                for i in range(morphBuffer.BufferLength()):
                    self.buffer.append(morphBuffer.Buffer(i))
            else:
                self.buffer = morphBuffer.BufferAsNumpy()

    # MorphBufferT
    def Pack(self, builder):
        if self.buffer is not None:
            if np is not None and type(self.buffer) is np.ndarray:
                buffer = builder.CreateNumpyVector(self.buffer)
            else:
                MorphBufferStartBufferVector(builder, len(self.buffer))
                for i in reversed(range(len(self.buffer))):
                    builder.PrependUint8(self.buffer[i])
                buffer = builder.EndVector()
        MorphBufferStart(builder)
        if self.buffer is not None:
            MorphBufferAddBuffer(builder, buffer)
        morphBuffer = MorphBufferEnd(builder)
        return morphBuffer
