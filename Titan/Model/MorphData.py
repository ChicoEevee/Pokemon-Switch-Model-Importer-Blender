# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MorphData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MorphData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMorphData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MorphData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MorphData
    def Attrs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.MorphAccessor import MorphAccessor
            obj = MorphAccessor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MorphData
    def AttrsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MorphData
    def AttrsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # MorphData
    def Size(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.MorphSize import MorphSize
            obj = MorphSize()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MorphData
    def SizeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MorphData
    def SizeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def MorphDataStart(builder):
    builder.StartObject(2)

def Start(builder):
    MorphDataStart(builder)

def MorphDataAddAttrs(builder, attrs):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(attrs), 0)

def AddAttrs(builder, attrs):
    MorphDataAddAttrs(builder, attrs)

def MorphDataStartAttrsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAttrsVector(builder, numElems):
    return MorphDataStartAttrsVector(builder, numElems)

def MorphDataAddSize(builder, size):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(size), 0)

def AddSize(builder, size):
    MorphDataAddSize(builder, size)

def MorphDataStartSizeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSizeVector(builder, numElems):
    return MorphDataStartSizeVector(builder, numElems)

def MorphDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return MorphDataEnd(builder)

import Titan.Model.MorphAccessor
import Titan.Model.MorphSize
try:
    from typing import List
except:
    pass

class MorphDataT(object):

    # MorphDataT
    def __init__(self):
        self.attrs = None  # type: List[Titan.Model.MorphAccessor.MorphAccessorT]
        self.size = None  # type: List[Titan.Model.MorphSize.MorphSizeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        morphData = MorphData()
        morphData.Init(buf, pos)
        return cls.InitFromObj(morphData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, morphData):
        x = MorphDataT()
        x._UnPack(morphData)
        return x

    # MorphDataT
    def _UnPack(self, morphData):
        if morphData is None:
            return
        if not morphData.AttrsIsNone():
            self.attrs = []
            for i in range(morphData.AttrsLength()):
                if morphData.Attrs(i) is None:
                    self.attrs.append(None)
                else:
                    morphAccessor_ = Titan.Model.MorphAccessor.MorphAccessorT.InitFromObj(morphData.Attrs(i))
                    self.attrs.append(morphAccessor_)
        if not morphData.SizeIsNone():
            self.size = []
            for i in range(morphData.SizeLength()):
                if morphData.Size(i) is None:
                    self.size.append(None)
                else:
                    morphSize_ = Titan.Model.MorphSize.MorphSizeT.InitFromObj(morphData.Size(i))
                    self.size.append(morphSize_)

    # MorphDataT
    def Pack(self, builder):
        if self.attrs is not None:
            attrslist = []
            for i in range(len(self.attrs)):
                attrslist.append(self.attrs[i].Pack(builder))
            MorphDataStartAttrsVector(builder, len(self.attrs))
            for i in reversed(range(len(self.attrs))):
                builder.PrependUOffsetTRelative(attrslist[i])
            attrs = builder.EndVector()
        if self.size is not None:
            sizelist = []
            for i in range(len(self.size)):
                sizelist.append(self.size[i].Pack(builder))
            MorphDataStartSizeVector(builder, len(self.size))
            for i in reversed(range(len(self.size))):
                builder.PrependUOffsetTRelative(sizelist[i])
            size = builder.EndVector()
        MorphDataStart(builder)
        if self.attrs is not None:
            MorphDataAddAttrs(builder, attrs)
        if self.size is not None:
            MorphDataAddSize(builder, size)
        morphData = MorphDataEnd(builder)
        return morphData
