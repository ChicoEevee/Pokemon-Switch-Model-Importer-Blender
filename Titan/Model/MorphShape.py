# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MorphShape(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MorphShape()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMorphShape(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MorphShape
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MorphShape
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.MorphData import MorphData
            obj = MorphData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MorphShape
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MorphShape
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # MorphShape
    def Metadata(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.MorphMetaData import MorphMetaData
            obj = MorphMetaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MorphShape
    def MetadataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MorphShape
    def MetadataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # MorphShape
    def MorphName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MorphShapeStart(builder):
    builder.StartObject(3)

def Start(builder):
    MorphShapeStart(builder)

def MorphShapeAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    MorphShapeAddData(builder, data)

def MorphShapeStartDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataVector(builder, numElems):
    return MorphShapeStartDataVector(builder, numElems)

def MorphShapeAddMetadata(builder, metadata):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)

def AddMetadata(builder, metadata):
    MorphShapeAddMetadata(builder, metadata)

def MorphShapeStartMetadataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMetadataVector(builder, numElems):
    return MorphShapeStartMetadataVector(builder, numElems)

def MorphShapeAddMorphName(builder, morphName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(morphName), 0)

def AddMorphName(builder, morphName):
    MorphShapeAddMorphName(builder, morphName)

def MorphShapeEnd(builder):
    return builder.EndObject()

def End(builder):
    return MorphShapeEnd(builder)

import Titan.Model.MorphData
import Titan.Model.MorphMetaData
try:
    from typing import List
except:
    pass

class MorphShapeT(object):

    # MorphShapeT
    def __init__(self):
        self.data = None  # type: List[Titan.Model.MorphData.MorphDataT]
        self.metadata = None  # type: List[Titan.Model.MorphMetaData.MorphMetaDataT]
        self.morphName = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        morphShape = MorphShape()
        morphShape.Init(buf, pos)
        return cls.InitFromObj(morphShape)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, morphShape):
        x = MorphShapeT()
        x._UnPack(morphShape)
        return x

    # MorphShapeT
    def _UnPack(self, morphShape):
        if morphShape is None:
            return
        if not morphShape.DataIsNone():
            self.data = []
            for i in range(morphShape.DataLength()):
                if morphShape.Data(i) is None:
                    self.data.append(None)
                else:
                    morphData_ = Titan.Model.MorphData.MorphDataT.InitFromObj(morphShape.Data(i))
                    self.data.append(morphData_)
        if not morphShape.MetadataIsNone():
            self.metadata = []
            for i in range(morphShape.MetadataLength()):
                if morphShape.Metadata(i) is None:
                    self.metadata.append(None)
                else:
                    morphMetaData_ = Titan.Model.MorphMetaData.MorphMetaDataT.InitFromObj(morphShape.Metadata(i))
                    self.metadata.append(morphMetaData_)
        self.morphName = morphShape.MorphName()

    # MorphShapeT
    def Pack(self, builder):
        if self.data is not None:
            datalist = []
            for i in range(len(self.data)):
                datalist.append(self.data[i].Pack(builder))
            MorphShapeStartDataVector(builder, len(self.data))
            for i in reversed(range(len(self.data))):
                builder.PrependUOffsetTRelative(datalist[i])
            data = builder.EndVector()
        if self.metadata is not None:
            metadatalist = []
            for i in range(len(self.metadata)):
                metadatalist.append(self.metadata[i].Pack(builder))
            MorphShapeStartMetadataVector(builder, len(self.metadata))
            for i in reversed(range(len(self.metadata))):
                builder.PrependUOffsetTRelative(metadatalist[i])
            metadata = builder.EndVector()
        if self.morphName is not None:
            morphName = builder.CreateString(self.morphName)
        MorphShapeStart(builder)
        if self.data is not None:
            MorphShapeAddData(builder, data)
        if self.metadata is not None:
            MorphShapeAddMetadata(builder, metadata)
        if self.morphName is not None:
            MorphShapeAddMorphName(builder, morphName)
        morphShape = MorphShapeEnd(builder)
        return morphShape
