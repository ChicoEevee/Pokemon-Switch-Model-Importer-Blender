# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SamplerState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SamplerState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSamplerState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SamplerState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SamplerState
    def SamplerState0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SamplerState
    def SamplerState1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SamplerState
    def SamplerState2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SamplerState
    def SamplerState3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SamplerState
    def SamplerState4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SamplerState
    def SamplerState5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SamplerState
    def SamplerState6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SamplerState
    def SamplerState7(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SamplerState
    def SamplerState8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SamplerState
    def RepeatU(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SamplerState
    def RepeatV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SamplerState
    def RepeatW(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SamplerState
    def BorderColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = o + self._tab.Pos
            from Titan.Model.RGBA import RGBA
            obj = RGBA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SamplerStateStart(builder):
    builder.StartObject(13)

def Start(builder):
    SamplerStateStart(builder)

def SamplerStateAddSamplerState0(builder, samplerState0):
    builder.PrependUint32Slot(0, samplerState0, 0)

def AddSamplerState0(builder, samplerState0):
    SamplerStateAddSamplerState0(builder, samplerState0)

def SamplerStateAddSamplerState1(builder, samplerState1):
    builder.PrependUint32Slot(1, samplerState1, 0)

def AddSamplerState1(builder, samplerState1):
    SamplerStateAddSamplerState1(builder, samplerState1)

def SamplerStateAddSamplerState2(builder, samplerState2):
    builder.PrependUint32Slot(2, samplerState2, 0)

def AddSamplerState2(builder, samplerState2):
    SamplerStateAddSamplerState2(builder, samplerState2)

def SamplerStateAddSamplerState3(builder, samplerState3):
    builder.PrependUint32Slot(3, samplerState3, 0)

def AddSamplerState3(builder, samplerState3):
    SamplerStateAddSamplerState3(builder, samplerState3)

def SamplerStateAddSamplerState4(builder, samplerState4):
    builder.PrependUint32Slot(4, samplerState4, 0)

def AddSamplerState4(builder, samplerState4):
    SamplerStateAddSamplerState4(builder, samplerState4)

def SamplerStateAddSamplerState5(builder, samplerState5):
    builder.PrependUint32Slot(5, samplerState5, 0)

def AddSamplerState5(builder, samplerState5):
    SamplerStateAddSamplerState5(builder, samplerState5)

def SamplerStateAddSamplerState6(builder, samplerState6):
    builder.PrependUint32Slot(6, samplerState6, 0)

def AddSamplerState6(builder, samplerState6):
    SamplerStateAddSamplerState6(builder, samplerState6)

def SamplerStateAddSamplerState7(builder, samplerState7):
    builder.PrependUint32Slot(7, samplerState7, 0)

def AddSamplerState7(builder, samplerState7):
    SamplerStateAddSamplerState7(builder, samplerState7)

def SamplerStateAddSamplerState8(builder, samplerState8):
    builder.PrependUint32Slot(8, samplerState8, 0)

def AddSamplerState8(builder, samplerState8):
    SamplerStateAddSamplerState8(builder, samplerState8)

def SamplerStateAddRepeatU(builder, repeatU):
    builder.PrependUint32Slot(9, repeatU, 0)

def AddRepeatU(builder, repeatU):
    SamplerStateAddRepeatU(builder, repeatU)

def SamplerStateAddRepeatV(builder, repeatV):
    builder.PrependUint32Slot(10, repeatV, 0)

def AddRepeatV(builder, repeatV):
    SamplerStateAddRepeatV(builder, repeatV)

def SamplerStateAddRepeatW(builder, repeatW):
    builder.PrependUint32Slot(11, repeatW, 0)

def AddRepeatW(builder, repeatW):
    SamplerStateAddRepeatW(builder, repeatW)

def SamplerStateAddBorderColor(builder, borderColor):
    builder.PrependStructSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(borderColor), 0)

def AddBorderColor(builder, borderColor):
    SamplerStateAddBorderColor(builder, borderColor)

def SamplerStateEnd(builder):
    return builder.EndObject()

def End(builder):
    return SamplerStateEnd(builder)
