# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TRMDL(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TRMDL()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTRMDL(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TRMDL
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TRMDL
    def Unk0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TRMDL
    def Meshes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .trmeshes import trmeshes
            obj = trmeshes()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRMDL
    def MeshesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TRMDL
    def MeshesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # TRMDL
    def Skeleton(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .trskeleton import trskeleton
            obj = trskeleton()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRMDL
    def Materials(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TRMDL
    def MaterialsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TRMDL
    def MaterialsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # TRMDL
    def Lods(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Lod import Lod
            obj = Lod()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRMDL
    def LodsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TRMDL
    def LodsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # TRMDL
    def Bounds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Bounds import Bounds
            obj = Bounds()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRMDL
    def UnkVec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec4 import Vec4
            obj = Vec4()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRMDL
    def Trltt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TRMDL
    def Unk8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TRMDL
    def Unk9(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TRMDLStart(builder):
    builder.StartObject(10)

def Start(builder):
    TRMDLStart(builder)

def TRMDLAddUnk0(builder, unk0):
    builder.PrependUint32Slot(0, unk0, 0)

def AddUnk0(builder, unk0):
    TRMDLAddUnk0(builder, unk0)

def TRMDLAddMeshes(builder, meshes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(meshes), 0)

def AddMeshes(builder, meshes):
    TRMDLAddMeshes(builder, meshes)

def TRMDLStartMeshesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMeshesVector(builder, numElems: int) -> int:
    return TRMDLStartMeshesVector(builder, numElems)

def TRMDLAddSkeleton(builder, skeleton):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(skeleton), 0)

def AddSkeleton(builder, skeleton):
    TRMDLAddSkeleton(builder, skeleton)

def TRMDLAddMaterials(builder, materials):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(materials), 0)

def AddMaterials(builder, materials):
    TRMDLAddMaterials(builder, materials)

def TRMDLStartMaterialsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMaterialsVector(builder, numElems: int) -> int:
    return TRMDLStartMaterialsVector(builder, numElems)

def TRMDLAddLods(builder, lods):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lods), 0)

def AddLods(builder, lods):
    TRMDLAddLods(builder, lods)

def TRMDLStartLodsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLodsVector(builder, numElems: int) -> int:
    return TRMDLStartLodsVector(builder, numElems)

def TRMDLAddBounds(builder, bounds):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(bounds), 0)

def AddBounds(builder, bounds):
    TRMDLAddBounds(builder, bounds)

def TRMDLAddUnkVec(builder, unkVec):
    builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(unkVec), 0)

def AddUnkVec(builder, unkVec):
    TRMDLAddUnkVec(builder, unkVec)

def TRMDLAddTrltt(builder, trltt):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(trltt), 0)

def AddTrltt(builder, trltt):
    TRMDLAddTrltt(builder, trltt)

def TRMDLAddUnk8(builder, unk8):
    builder.PrependUint32Slot(8, unk8, 0)

def AddUnk8(builder, unk8):
    TRMDLAddUnk8(builder, unk8)

def TRMDLAddUnk9(builder, unk9):
    builder.PrependUint32Slot(9, unk9, 0)

def AddUnk9(builder, unk9):
    TRMDLAddUnk9(builder, unk9)

def TRMDLEnd(builder):
    return builder.EndObject()

def End(builder):
    return TRMDLEnd(builder)
