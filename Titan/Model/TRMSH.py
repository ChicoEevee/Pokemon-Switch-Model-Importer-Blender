# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TRMSH(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TRMSH()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTRMSH(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TRMSH
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TRMSH
    def Unk0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TRMSH
    def Meshes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.MeshShape import MeshShape
            obj = MeshShape()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRMSH
    def MeshesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TRMSH
    def MeshesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # TRMSH
    def BufferName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TRMSHStart(builder):
    builder.StartObject(3)

def Start(builder):
    TRMSHStart(builder)

def TRMSHAddUnk0(builder, unk0):
    builder.PrependUint32Slot(0, unk0, 0)

def AddUnk0(builder, unk0):
    TRMSHAddUnk0(builder, unk0)

def TRMSHAddMeshes(builder, meshes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(meshes), 0)

def AddMeshes(builder, meshes):
    TRMSHAddMeshes(builder, meshes)

def TRMSHStartMeshesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMeshesVector(builder, numElems):
    return TRMSHStartMeshesVector(builder, numElems)

def TRMSHAddBufferName(builder, bufferName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(bufferName), 0)

def AddBufferName(builder, bufferName):
    TRMSHAddBufferName(builder, bufferName)

def TRMSHEnd(builder):
    return builder.EndObject()

def End(builder):
    return TRMSHEnd(builder)

import Titan.Model.MeshShape
try:
    from typing import List
except:
    pass

class TRMSHT(object):

    # TRMSHT
    def __init__(self):
        self.unk0 = 0  # type: int
        self.meshes = None  # type: List[Titan.Model.MeshShape.MeshShapeT]
        self.bufferName = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        trmsh = TRMSH()
        trmsh.Init(buf, pos)
        return cls.InitFromObj(trmsh)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, trmsh):
        x = TRMSHT()
        x._UnPack(trmsh)
        return x

    # TRMSHT
    def _UnPack(self, trmsh):
        if trmsh is None:
            return
        self.unk0 = trmsh.Unk0()
        if not trmsh.MeshesIsNone():
            self.meshes = []
            for i in range(trmsh.MeshesLength()):
                if trmsh.Meshes(i) is None:
                    self.meshes.append(None)
                else:
                    meshShape_ = Titan.Model.MeshShape.MeshShapeT.InitFromObj(trmsh.Meshes(i))
                    self.meshes.append(meshShape_)
        self.bufferName = trmsh.BufferName()

    # TRMSHT
    def Pack(self, builder):
        if self.meshes is not None:
            mesheslist = []
            for i in range(len(self.meshes)):
                mesheslist.append(self.meshes[i].Pack(builder))
            TRMSHStartMeshesVector(builder, len(self.meshes))
            for i in reversed(range(len(self.meshes))):
                builder.PrependUOffsetTRelative(mesheslist[i])
            meshes = builder.EndVector()
        if self.bufferName is not None:
            bufferName = builder.CreateString(self.bufferName)
        TRMSHStart(builder)
        TRMSHAddUnk0(builder, self.unk0)
        if self.meshes is not None:
            TRMSHAddMeshes(builder, meshes)
        if self.bufferName is not None:
            TRMSHAddBufferName(builder, bufferName)
        trmsh = TRMSHEnd(builder)
        return trmsh
