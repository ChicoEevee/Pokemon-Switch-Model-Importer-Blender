# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TRMTR(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TRMTR()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTRMTR(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TRMTR
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TRMTR
    def Res0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TRMTR
    def Materials(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.Material import Material
            obj = Material()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRMTR
    def MaterialsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TRMTR
    def MaterialsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def TRMTRStart(builder):
    builder.StartObject(2)

def Start(builder):
    TRMTRStart(builder)

def TRMTRAddRes0(builder, res0):
    builder.PrependUint32Slot(0, res0, 0)

def AddRes0(builder, res0):
    TRMTRAddRes0(builder, res0)

def TRMTRAddMaterials(builder, materials):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(materials), 0)

def AddMaterials(builder, materials):
    TRMTRAddMaterials(builder, materials)

def TRMTRStartMaterialsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMaterialsVector(builder, numElems: int) -> int:
    return TRMTRStartMaterialsVector(builder, numElems)

def TRMTREnd(builder):
    return builder.EndObject()

def End(builder):
    return TRMTREnd(builder)
