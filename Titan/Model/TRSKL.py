# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TRSKL(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TRSKL()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTRSKL(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TRSKL
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TRSKL
    def Res0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TRSKL
    def TransformNodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .TransformNode import TransformNode
            obj = TransformNode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRSKL
    def TransformNodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TRSKL
    def TransformNodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # TRSKL
    def Bones(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Bone import Bone
            obj = Bone()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRSKL
    def BonesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TRSKL
    def BonesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # TRSKL
    def Iks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .IKControl import IKControl
            obj = IKControl()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRSKL
    def IksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TRSKL
    def IksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # TRSKL
    def RigOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TRSKLStart(builder):
    builder.StartObject(5)

def Start(builder):
    TRSKLStart(builder)

def TRSKLAddRes0(builder, res0):
    builder.PrependUint32Slot(0, res0, 0)

def AddRes0(builder, res0):
    TRSKLAddRes0(builder, res0)

def TRSKLAddTransformNodes(builder, transformNodes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(transformNodes), 0)

def AddTransformNodes(builder, transformNodes):
    TRSKLAddTransformNodes(builder, transformNodes)

def TRSKLStartTransformNodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTransformNodesVector(builder, numElems: int) -> int:
    return TRSKLStartTransformNodesVector(builder, numElems)

def TRSKLAddBones(builder, bones):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(bones), 0)

def AddBones(builder, bones):
    TRSKLAddBones(builder, bones)

def TRSKLStartBonesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBonesVector(builder, numElems: int) -> int:
    return TRSKLStartBonesVector(builder, numElems)

def TRSKLAddIks(builder, iks):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(iks), 0)

def AddIks(builder, iks):
    TRSKLAddIks(builder, iks)

def TRSKLStartIksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIksVector(builder, numElems: int) -> int:
    return TRSKLStartIksVector(builder, numElems)

def TRSKLAddRigOffset(builder, rigOffset):
    builder.PrependUint32Slot(4, rigOffset, 0)

def AddRigOffset(builder, rigOffset):
    TRSKLAddRigOffset(builder, rigOffset)

def TRSKLEnd(builder):
    return builder.EndObject()

def End(builder):
    return TRSKLEnd(builder)
