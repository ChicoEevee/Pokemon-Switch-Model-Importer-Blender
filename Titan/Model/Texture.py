# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Texture(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Texture()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTexture(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Texture
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Texture
    def TextureName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Texture
    def TextureFile(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Texture
    def TextureSlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TextureStart(builder):
    builder.StartObject(3)

def Start(builder):
    TextureStart(builder)

def TextureAddTextureName(builder, textureName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(textureName), 0)

def AddTextureName(builder, textureName):
    TextureAddTextureName(builder, textureName)

def TextureAddTextureFile(builder, textureFile):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(textureFile), 0)

def AddTextureFile(builder, textureFile):
    TextureAddTextureFile(builder, textureFile)

def TextureAddTextureSlot(builder, textureSlot):
    builder.PrependUint32Slot(2, textureSlot, 0)

def AddTextureSlot(builder, textureSlot):
    TextureAddTextureSlot(builder, textureSlot)

def TextureEnd(builder):
    return builder.EndObject()

def End(builder):
    return TextureEnd(builder)
