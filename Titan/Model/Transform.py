# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Transform(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Transform()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTransform(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Transform
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Transform
    def VecScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Transform
    def VecRot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Transform
    def VecTranslate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TransformStart(builder):
    builder.StartObject(3)

def Start(builder):
    TransformStart(builder)

def TransformAddVecScale(builder, vecScale):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vecScale), 0)

def AddVecScale(builder, vecScale):
    TransformAddVecScale(builder, vecScale)

def TransformAddVecRot(builder, vecRot):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(vecRot), 0)

def AddVecRot(builder, vecRot):
    TransformAddVecRot(builder, vecRot)

def TransformAddVecTranslate(builder, vecTranslate):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(vecTranslate), 0)

def AddVecTranslate(builder, vecTranslate):
    TransformAddVecTranslate(builder, vecTranslate)

def TransformEnd(builder):
    return builder.EndObject()

def End(builder):
    return TransformEnd(builder)
