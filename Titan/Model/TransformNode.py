# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TransformNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TransformNode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTransformNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TransformNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TransformNode
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TransformNode
    def Transform(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Model.Transform import Transform
            obj = Transform()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TransformNode
    def ScalePivot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from Titan.Model.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TransformNode
    def RotatePivot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from Titan.Model.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TransformNode
    def ParentIdx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # TransformNode
    def RigIdx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # TransformNode
    def EffectNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TransformNode
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TransformNodeStart(builder):
    builder.StartObject(8)

def Start(builder):
    TransformNodeStart(builder)

def TransformNodeAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    TransformNodeAddName(builder, name)

def TransformNodeAddTransform(builder, transform):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(transform), 0)

def AddTransform(builder, transform):
    TransformNodeAddTransform(builder, transform)

def TransformNodeAddScalePivot(builder, scalePivot):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(scalePivot), 0)

def AddScalePivot(builder, scalePivot):
    TransformNodeAddScalePivot(builder, scalePivot)

def TransformNodeAddRotatePivot(builder, rotatePivot):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rotatePivot), 0)

def AddRotatePivot(builder, rotatePivot):
    TransformNodeAddRotatePivot(builder, rotatePivot)

def TransformNodeAddParentIdx(builder, parentIdx):
    builder.PrependInt32Slot(4, parentIdx, -1)

def AddParentIdx(builder, parentIdx):
    TransformNodeAddParentIdx(builder, parentIdx)

def TransformNodeAddRigIdx(builder, rigIdx):
    builder.PrependInt32Slot(5, rigIdx, -1)

def AddRigIdx(builder, rigIdx):
    TransformNodeAddRigIdx(builder, rigIdx)

def TransformNodeAddEffectNode(builder, effectNode):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(effectNode), 0)

def AddEffectNode(builder, effectNode):
    TransformNodeAddEffectNode(builder, effectNode)

def TransformNodeAddPriority(builder, priority):
    builder.PrependUint32Slot(7, priority, 0)

def AddPriority(builder, priority):
    TransformNodeAddPriority(builder, priority)

def TransformNodeEnd(builder):
    return builder.EndObject()

def End(builder):
    return TransformNodeEnd(builder)

import Titan.Model.Transform
import Titan.Model.Vec3
try:
    from typing import Optional
except:
    pass

class TransformNodeT(object):

    # TransformNodeT
    def __init__(self):
        self.name = None  # type: str
        self.transform = None  # type: Optional[Titan.Model.Transform.TransformT]
        self.scalePivot = None  # type: Optional[Titan.Model.Vec3.Vec3T]
        self.rotatePivot = None  # type: Optional[Titan.Model.Vec3.Vec3T]
        self.parentIdx = -1  # type: int
        self.rigIdx = -1  # type: int
        self.effectNode = None  # type: str
        self.priority = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        transformNode = TransformNode()
        transformNode.Init(buf, pos)
        return cls.InitFromObj(transformNode)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, transformNode):
        x = TransformNodeT()
        x._UnPack(transformNode)
        return x

    # TransformNodeT
    def _UnPack(self, transformNode):
        if transformNode is None:
            return
        self.name = transformNode.Name()
        if transformNode.Transform() is not None:
            self.transform = Titan.Model.Transform.TransformT.InitFromObj(transformNode.Transform())
        if transformNode.ScalePivot() is not None:
            self.scalePivot = Titan.Model.Vec3.Vec3T.InitFromObj(transformNode.ScalePivot())
        if transformNode.RotatePivot() is not None:
            self.rotatePivot = Titan.Model.Vec3.Vec3T.InitFromObj(transformNode.RotatePivot())
        self.parentIdx = transformNode.ParentIdx()
        self.rigIdx = transformNode.RigIdx()
        self.effectNode = transformNode.EffectNode()
        self.priority = transformNode.Priority()

    # TransformNodeT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.transform is not None:
            transform = self.transform.Pack(builder)
        if self.effectNode is not None:
            effectNode = builder.CreateString(self.effectNode)
        TransformNodeStart(builder)
        if self.name is not None:
            TransformNodeAddName(builder, name)
        if self.transform is not None:
            TransformNodeAddTransform(builder, transform)
        if self.scalePivot is not None:
            scalePivot = self.scalePivot.Pack(builder)
            TransformNodeAddScalePivot(builder, scalePivot)
        if self.rotatePivot is not None:
            rotatePivot = self.rotatePivot.Pack(builder)
            TransformNodeAddRotatePivot(builder, rotatePivot)
        TransformNodeAddParentIdx(builder, self.parentIdx)
        TransformNodeAddRigIdx(builder, self.rigIdx)
        if self.effectNode is not None:
            TransformNodeAddEffectNode(builder, effectNode)
        TransformNodeAddPriority(builder, self.priority)
        transformNode = TransformNodeEnd(builder)
        return transformNode
