# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VertexAccessor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VertexAccessor()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVertexAccessor(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VertexAccessor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VertexAccessor
    def Attr0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # VertexAccessor
    def Attribute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # VertexAccessor
    def AttributeLayer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # VertexAccessor
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # VertexAccessor
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def VertexAccessorStart(builder):
    builder.StartObject(5)

def Start(builder):
    VertexAccessorStart(builder)

def VertexAccessorAddAttr0(builder, attr0):
    builder.PrependInt32Slot(0, attr0, -1)

def AddAttr0(builder, attr0):
    VertexAccessorAddAttr0(builder, attr0)

def VertexAccessorAddAttribute(builder, attribute):
    builder.PrependUint32Slot(1, attribute, 0)

def AddAttribute(builder, attribute):
    VertexAccessorAddAttribute(builder, attribute)

def VertexAccessorAddAttributeLayer(builder, attributeLayer):
    builder.PrependUint32Slot(2, attributeLayer, 0)

def AddAttributeLayer(builder, attributeLayer):
    VertexAccessorAddAttributeLayer(builder, attributeLayer)

def VertexAccessorAddType(builder, type):
    builder.PrependUint32Slot(3, type, 0)

def AddType(builder, type):
    VertexAccessorAddType(builder, type)

def VertexAccessorAddPosition(builder, position):
    builder.PrependUint32Slot(4, position, 0)

def AddPosition(builder, position):
    VertexAccessorAddPosition(builder, position)

def VertexAccessorEnd(builder):
    return builder.EndObject()

def End(builder):
    return VertexAccessorEnd(builder)


class VertexAccessorT(object):

    # VertexAccessorT
    def __init__(self):
        self.attr0 = -1  # type: int
        self.attribute = 0  # type: int
        self.attributeLayer = 0  # type: int
        self.type = 0  # type: int
        self.position = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vertexAccessor = VertexAccessor()
        vertexAccessor.Init(buf, pos)
        return cls.InitFromObj(vertexAccessor)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vertexAccessor):
        x = VertexAccessorT()
        x._UnPack(vertexAccessor)
        return x

    # VertexAccessorT
    def _UnPack(self, vertexAccessor):
        if vertexAccessor is None:
            return
        self.attr0 = vertexAccessor.Attr0()
        self.attribute = vertexAccessor.Attribute()
        self.attributeLayer = vertexAccessor.AttributeLayer()
        self.type = vertexAccessor.Type()
        self.position = vertexAccessor.Position()

    # VertexAccessorT
    def Pack(self, builder):
        VertexAccessorStart(builder)
        VertexAccessorAddAttr0(builder, self.attr0)
        VertexAccessorAddAttribute(builder, self.attribute)
        VertexAccessorAddAttributeLayer(builder, self.attributeLayer)
        VertexAccessorAddType(builder, self.type)
        VertexAccessorAddPosition(builder, self.position)
        vertexAccessor = VertexAccessorEnd(builder)
        return vertexAccessor
