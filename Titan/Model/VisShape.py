# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VisShape(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VisShape()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVisShape(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VisShape
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VisShape
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # VisShape
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def VisShapeStart(builder):
    builder.StartObject(2)

def Start(builder):
    VisShapeStart(builder)

def VisShapeAddIndex(builder, index):
    builder.PrependUint32Slot(0, index, 0)

def AddIndex(builder, index):
    VisShapeAddIndex(builder, index)

def VisShapeAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    VisShapeAddName(builder, name)

def VisShapeEnd(builder):
    return builder.EndObject()

def End(builder):
    return VisShapeEnd(builder)


class VisShapeT(object):

    # VisShapeT
    def __init__(self):
        self.index = 0  # type: int
        self.name = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        visShape = VisShape()
        visShape.Init(buf, pos)
        return cls.InitFromObj(visShape)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, visShape):
        x = VisShapeT()
        x._UnPack(visShape)
        return x

    # VisShapeT
    def _UnPack(self, visShape):
        if visShape is None:
            return
        self.index = visShape.Index()
        self.name = visShape.Name()

    # VisShapeT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        VisShapeStart(builder)
        VisShapeAddIndex(builder, self.index)
        if self.name is not None:
            VisShapeAddName(builder, name)
        visShape = VisShapeEnd(builder)
        return visShape
