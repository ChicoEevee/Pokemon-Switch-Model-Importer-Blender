# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TrinityScene

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SceneEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SceneEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSceneEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SceneEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SceneEntry
    def TypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SceneEntry
    def NestedType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SceneEntry
    def NestedTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SceneEntry
    def NestedTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SceneEntry
    def NestedTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # SceneEntry
    def SubObjects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.TrinityScene.SceneEntry import SceneEntry
            obj = SceneEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SceneEntry
    def SubObjectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SceneEntry
    def SubObjectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def SceneEntryStart(builder):
    builder.StartObject(3)

def Start(builder):
    SceneEntryStart(builder)

def SceneEntryAddTypeName(builder, typeName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(typeName), 0)

def AddTypeName(builder, typeName):
    SceneEntryAddTypeName(builder, typeName)

def SceneEntryAddNestedType(builder, nestedType):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nestedType), 0)

def AddNestedType(builder, nestedType):
    SceneEntryAddNestedType(builder, nestedType)

def SceneEntryStartNestedTypeVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartNestedTypeVector(builder, numElems: int) -> int:
    return SceneEntryStartNestedTypeVector(builder, numElems)

def SceneEntryAddSubObjects(builder, subObjects):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(subObjects), 0)

def AddSubObjects(builder, subObjects):
    SceneEntryAddSubObjects(builder, subObjects)

def SceneEntryStartSubObjectsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSubObjectsVector(builder, numElems: int) -> int:
    return SceneEntryStartSubObjectsVector(builder, numElems)

def SceneEntryEnd(builder):
    return builder.EndObject()

def End(builder):
    return SceneEntryEnd(builder)
