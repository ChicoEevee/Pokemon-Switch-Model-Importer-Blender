# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TrinityScene

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class trinity_Scene(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = trinity_Scene()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAstrinity_Scene(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # trinity_Scene
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # trinity_Scene
    def SceneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # trinity_Scene
    def SceneExtra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # trinity_Scene
    def Res2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # trinity_Scene
    def Res3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # trinity_Scene
    def SceneObjectList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.TrinityScene.SceneEntry import SceneEntry
            obj = SceneEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # trinity_Scene
    def SceneObjectListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # trinity_Scene
    def SceneObjectListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # trinity_Scene
    def Res4(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # trinity_Scene
    def Res4AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # trinity_Scene
    def Res4Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # trinity_Scene
    def Res4IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # trinity_Scene
    def Unk6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def trinity_SceneStart(builder):
    builder.StartObject(7)

def Start(builder):
    trinity_SceneStart(builder)

def trinity_SceneAddSceneName(builder, sceneName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sceneName), 0)

def AddSceneName(builder, sceneName):
    trinity_SceneAddSceneName(builder, sceneName)

def trinity_SceneAddSceneExtra(builder, sceneExtra):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sceneExtra), 0)

def AddSceneExtra(builder, sceneExtra):
    trinity_SceneAddSceneExtra(builder, sceneExtra)

def trinity_SceneAddRes2(builder, res2):
    builder.PrependUint32Slot(2, res2, 0)

def AddRes2(builder, res2):
    trinity_SceneAddRes2(builder, res2)

def trinity_SceneAddRes3(builder, res3):
    builder.PrependUint32Slot(3, res3, 0)

def AddRes3(builder, res3):
    trinity_SceneAddRes3(builder, res3)

def trinity_SceneAddSceneObjectList(builder, sceneObjectList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(sceneObjectList), 0)

def AddSceneObjectList(builder, sceneObjectList):
    trinity_SceneAddSceneObjectList(builder, sceneObjectList)

def trinity_SceneStartSceneObjectListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSceneObjectListVector(builder, numElems: int) -> int:
    return trinity_SceneStartSceneObjectListVector(builder, numElems)

def trinity_SceneAddRes4(builder, res4):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(res4), 0)

def AddRes4(builder, res4):
    trinity_SceneAddRes4(builder, res4)

def trinity_SceneStartRes4Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRes4Vector(builder, numElems: int) -> int:
    return trinity_SceneStartRes4Vector(builder, numElems)

def trinity_SceneAddUnk6(builder, unk6):
    builder.PrependUint8Slot(6, unk6, 0)

def AddUnk6(builder, unk6):
    trinity_SceneAddUnk6(builder, unk6)

def trinity_SceneEnd(builder):
    return builder.EndObject()

def End(builder):
    return trinity_SceneEnd(builder)
