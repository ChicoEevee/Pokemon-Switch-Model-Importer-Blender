# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TrinityScene

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class trinity_SceneObject(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = trinity_SceneObject()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAstrinity_SceneObject(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # trinity_SceneObject
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # trinity_SceneObject
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # trinity_SceneObject
    def Srt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.TrinityScene.SRT import SRT
            obj = SRT()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # trinity_SceneObject
    def Unk1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # trinity_SceneObject
    def Unk2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # trinity_SceneObject
    def Unk3(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # trinity_SceneObject
    def Unk3AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # trinity_SceneObject
    def Unk3Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # trinity_SceneObject
    def Unk3IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # trinity_SceneObject
    def Unk4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # trinity_SceneObject
    def Unk5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # trinity_SceneObject
    def Unk6(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # trinity_SceneObject
    def Unk6AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # trinity_SceneObject
    def Unk6Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # trinity_SceneObject
    def Unk6IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # trinity_SceneObject
    def Unk7(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # trinity_SceneObject
    def Unk7Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # trinity_SceneObject
    def Unk7IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def trinity_SceneObjectStart(builder):
    builder.StartObject(9)

def Start(builder):
    trinity_SceneObjectStart(builder)

def trinity_SceneObjectAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    trinity_SceneObjectAddName(builder, name)

def trinity_SceneObjectAddSrt(builder, srt):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(srt), 0)

def AddSrt(builder, srt):
    trinity_SceneObjectAddSrt(builder, srt)

def trinity_SceneObjectAddUnk1(builder, unk1):
    builder.PrependUint32Slot(2, unk1, 0)

def AddUnk1(builder, unk1):
    trinity_SceneObjectAddUnk1(builder, unk1)

def trinity_SceneObjectAddUnk2(builder, unk2):
    builder.PrependUint8Slot(3, unk2, 0)

def AddUnk2(builder, unk2):
    trinity_SceneObjectAddUnk2(builder, unk2)

def trinity_SceneObjectAddUnk3(builder, unk3):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unk3), 0)

def AddUnk3(builder, unk3):
    trinity_SceneObjectAddUnk3(builder, unk3)

def trinity_SceneObjectStartUnk3Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUnk3Vector(builder, numElems: int) -> int:
    return trinity_SceneObjectStartUnk3Vector(builder, numElems)

def trinity_SceneObjectAddUnk4(builder, unk4):
    builder.PrependUint8Slot(5, unk4, 0)

def AddUnk4(builder, unk4):
    trinity_SceneObjectAddUnk4(builder, unk4)

def trinity_SceneObjectAddUnk5(builder, unk5):
    builder.PrependUint32Slot(6, unk5, 0)

def AddUnk5(builder, unk5):
    trinity_SceneObjectAddUnk5(builder, unk5)

def trinity_SceneObjectAddUnk6(builder, unk6):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(unk6), 0)

def AddUnk6(builder, unk6):
    trinity_SceneObjectAddUnk6(builder, unk6)

def trinity_SceneObjectStartUnk6Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUnk6Vector(builder, numElems: int) -> int:
    return trinity_SceneObjectStartUnk6Vector(builder, numElems)

def trinity_SceneObjectAddUnk7(builder, unk7):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(unk7), 0)

def AddUnk7(builder, unk7):
    trinity_SceneObjectAddUnk7(builder, unk7)

def trinity_SceneObjectStartUnk7Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUnk7Vector(builder, numElems: int) -> int:
    return trinity_SceneObjectStartUnk7Vector(builder, numElems)

def trinity_SceneObjectEnd(builder):
    return builder.EndObject()

def End(builder):
    return trinity_SceneObjectEnd(builder)
